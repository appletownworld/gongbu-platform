version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: gongbu_postgres
    environment:
      POSTGRES_DB: gongbu_platform
      POSTGRES_USER: ${DB_USER:-gongbu_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-gongbu_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: gongbu_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    container_name: gongbu_api_gateway
    environment:
      - NODE_ENV=production
      - PORT=3007
      - AUTH_SERVICE_URL=http://auth-service:3001
      - COURSE_SERVICE_URL=http://course-service:3002
      - BOT_SERVICE_URL=http://bot-service:3003
      - PAYMENT_SERVICE_URL=http://payment-service:3004
      - NOTIFICATION_SERVICE_URL=http://notification-service:3005
      - ANALYTICS_SERVICE_URL=http://analytics-service:3006
    ports:
      - "3007:3007"
    depends_on:
      - auth-service
      - course-service
      - bot-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_auth_service
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${DB_USER:-gongbu_user}:${DB_PASSWORD:-secure_password}@postgres:5432/gongbu_platform
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Course Service
  course-service:
    build:
      context: ./services/course-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_course_service
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://${DB_USER:-gongbu_user}:${DB_PASSWORD:-secure_password}@postgres:5432/gongbu_platform
      - REDIS_URL=redis://redis:6379
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./uploads:/app/uploads

  # Bot Service (основной компонент)
  bot-service:
    build:
      context: ./services/bot-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_bot_service
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://${DB_USER:-gongbu_user}:${DB_PASSWORD:-secure_password}@postgres:5432/gongbu_platform
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - COURSE_SERVICE_URL=http://course-service:3002
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REDIS_URL=redis://redis:6379
      - WEBAPP_URL=${WEBAPP_URL:-https://yourdomain.com}
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
      - course-service
      - auth-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_payment_service
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://${DB_USER:-gongbu_user}:${DB_PASSWORD:-secure_password}@postgres:5432/gongbu_platform
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - YOOKASSA_SECRET_KEY=${YOOKASSA_SECRET_KEY}
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_notification_service
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://${DB_USER:-gongbu_user}:${DB_PASSWORD:-secure_password}@postgres:5432/gongbu_platform
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    ports:
      - "3005:3005"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_analytics_service
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://${DB_USER:-gongbu_user}:${DB_PASSWORD:-secure_password}@postgres:5432/gongbu_platform
      - REDIS_URL=redis://redis:6379
    ports:
      - "3006:3006"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local

networks:
  default:
    name: gongbu_network