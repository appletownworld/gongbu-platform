version: '3.8'

services:
  # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  postgres:
    image: postgres:15-alpine
    container_name: gongbu_postgres_prod
    environment:
      POSTGRES_DB: gongbu_prod
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - gongbu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: gongbu_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - gongbu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # üåê API GATEWAY - Main Entry Point
  # ===========================================
  
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    container_name: gongbu_api_gateway_prod
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      
      # Microservices URLs
      AUTH_SERVICE_URL: http://auth-service:3001
      COURSE_SERVICE_URL: http://course-service:3002
      BOT_SERVICE_URL: http://bot-service:3003
      PAYMENT_SERVICE_URL: http://payment-service:3004
      NOTIFICATION_SERVICE_URL: http://notification-service:3005
      ANALYTICS_SERVICE_URL: http://analytics-service:3006
      PLUGIN_SERVICE_URL: http://plugin-service:3007
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
      
      # Logging
      LOG_LEVEL: info
      ENABLE_REQUEST_LOGGING: true
      
      # API Documentation
      SWAGGER_ENABLED: ${SWAGGER_ENABLED:-false}
      SWAGGER_PATH: api
      
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # üîê AUTH SERVICE
  # ===========================================
  
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_auth_service_prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/gongbu_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # üìö COURSE SERVICE
  # ===========================================
  
  course-service:
    build:
      context: ./services/course-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_course_service_prod
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/gongbu_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - uploads_data:/app/uploads
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # ü§ñ BOT SERVICE
  # ===========================================
  
  bot-service:
    build:
      context: ./services/bot-service
      dockerfile: Dockerfile.prod
    container_name: gongbu_bot_service_prod
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/gongbu_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # üåê WEB APPLICATION
  # ===========================================
  
  web-app:
    build:
      context: ./apps/web-app
      dockerfile: Dockerfile.prod
    container_name: gongbu_web_app_prod
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:3000}
    networks:
      - gongbu_network
    depends_on:
      - api-gateway
    restart: unless-stopped

  # ===========================================
  # üåê NGINX REVERSE PROXY
  # ===========================================
  
  nginx:
    image: nginx:alpine
    container_name: gongbu_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./letsencrypt:/etc/letsencrypt
    networks:
      - gongbu_network
    depends_on:
      - api-gateway
      - web-app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
  redis_data_prod:
  uploads_data:

networks:
  gongbu_network:
    driver: bridge