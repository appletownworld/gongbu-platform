name: Deploy to VPS

on:
  workflow_dispatch:  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ GitHub UI
  push:               # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –≤–∫–ª—é—á–µ–Ω!
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # –î–µ–ø–ª–æ–π –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ë–ï–ó SUDO!)
          cd ~/gongbu-platform || (git clone https://github.com/appletownworld/gongbu-platform.git ~/gongbu-platform && cd ~/gongbu-platform)
          
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã)
          git fetch origin
          git reset --hard origin/main
          
          # –°–æ–∑–¥–∞–Ω–∏–µ .env –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub
          cat > .env << 'EOF'
          NODE_ENV=production
          PORT=3000
          
          # Database
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # Redis
          REDIS_URL=redis://localhost:6379
          REDIS_PASSWORD=
          
          # JWT
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=7d
          
          # Telegram
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BOT_USERNAME=gongbu_platform_bot
          TELEGRAM_WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}
          TELEGRAM_WEBAPP_SECRET=${{ secrets.TELEGRAM_WEBAPP_SECRET }}
          WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}
          ADMIN_USER_IDS=${{ secrets.ADMIN_USER_IDS }}
          TELEGRAM_PAYMENT_TOKEN=
          
          # URLs
          WEBAPP_URL=${{ secrets.APP_URL }}
          APP_URL=${{ secrets.APP_URL }}
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          WEBSOCKET_URL=wss://${{ secrets.DOMAIN_NAME }}/ws
          DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
          
          # CORS
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          
          # Payment
          STRIPE_SECRET_KEY=
          STRIPE_WEBHOOK_SECRET=
          
          # Email
          SENDGRID_API_KEY=
          EMAIL_FROM=noreply@${{ secrets.DOMAIN_NAME }}
          
          # Monitoring
          GRAFANA_ADMIN_PASSWORD=admin
          
          # Services URLs (internal)
          AUTH_SERVICE_URL=http://auth-service:3001
          COURSE_SERVICE_URL=http://course-service:3002
          BOT_SERVICE_URL=http://bot-service:3003
          PAYMENT_SERVICE_URL=http://payment-service:3004
          NOTIFICATION_SERVICE_URL=http://notification-service:3005
          ANALYTICS_SERVICE_URL=http://analytics-service:3006
          EOF
          
          # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ docker –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
          groups $USER | grep -q docker || (echo "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ docker. –î–æ–±–∞–≤—å—Ç–µ: sudo usermod -aG docker $USER && exit")
          
          # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ nginx.conf
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              upstream web-app {
                  server web-app:3000;
              }
              
              upstream bot-service {
                  server bot-service:3003;
              }
              
              server {
                  listen 80;
                  server_name _;
                  
                  location /health {
                      return 200 'OK';
                      add_header Content-Type text/plain;
                  }
                  
                  location /api/bots {
                      proxy_pass http://bot-service;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
                  
                  location /webhook {
                      proxy_pass http://bot-service;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
                  
                  location / {
                      proxy_pass http://web-app;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
              }
          }
          EOF
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          docker-compose -f docker-compose.simple.yml down || true
          
          # –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã Docker
          docker system prune -f || echo "‚ö†Ô∏è Docker system prune failed, continuing..."
          
          # –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã)
          docker-compose -f docker-compose.simple.yml up -d --build
          
          # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
          for i in {1..30}; do
            if docker-compose -f docker-compose.simple.yml ps | grep -q "Up"; then
              echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
              break
            fi
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ($i/30)..."
            sleep 5
          done
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
          echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
          docker-compose -f docker-compose.simple.yml ps
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
          if ! docker-compose -f docker-compose.simple.yml ps | grep -q "Up"; then
            echo "‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏. –õ–æ–≥–∏:"
            docker-compose -f docker-compose.simple.yml logs --tail=50
          else
            echo "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
            echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–¢–ò:"
            echo "üìç –í–Ω–µ—à–Ω–∏–π IP VPS:"
            curl -s ifconfig.me || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP"
            
            echo "üîå –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:"
            netstat -tlnp 2>/dev/null | grep -E ':80 |:443 ' || echo "–ü–æ—Ä—Ç—ã 80/443 –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è"
            
            echo "üè• –õ–æ–∫–∞–ª—å–Ω—ã–π health check:"
            curl -f http://localhost:80/health --max-time 5 2>/dev/null && echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π health OK" || echo "‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π health –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
            echo "üåê Nginx —Å—Ç–∞—Ç—É—Å:"
            docker-compose -f docker-compose.simple.yml logs nginx --tail=10
          fi

    - name: Wait for HTTPS (smart retry)
      continue-on-error: true
      run: |
        echo "üîç –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ HTTPS endpoint..."
        APP_URL="${{ secrets.APP_URL }}"
        DOMAIN_URL="${APP_URL:-https://gongbu.appletownworld.com}"
        
        curl -fsS "$DOMAIN_URL/health" \
          --retry 20 --retry-all-errors --retry-delay 5 --max-time 10 \
          --retry-connrefused || {
          echo "‚ùå HTTPS health check –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º HTTP..."
          HTTP_URL=$(echo "$DOMAIN_URL" | sed 's/https:/http:/')
          curl -fsS "$HTTP_URL/health" \
            --retry 10 --retry-all-errors --retry-delay 3 --max-time 8 || {
            echo ""
            echo "üö® –í–ù–ò–ú–ê–ù–ò–ï: Health check –Ω–µ –ø—Ä–æ—à–µ–ª!"
            echo "üìã –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨ –ù–ê VPS:"
            echo "1. sudo ufw allow 80/tcp && sudo ufw allow 443/tcp"  
            echo "2. nslookup $DOMAIN_URL (DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ?)"
            echo "3. curl ifconfig.me (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP –≤ DNS?)"
            echo "4. docker-compose -f ~/gongbu-platform/docker-compose.simple.yml ps"
            echo "5. curl http://localhost:80/health (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ?)"
            echo ""
            echo "üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: https://github.com/${{ github.repository }}/blob/main/TROUBLESHOOTING-NETWORK.md"
            echo ""
            echo "üèóÔ∏è –ö–û–ù–¢–ï–ô–ù–ï–†–´ –°–û–ë–†–ê–ù–´ –£–°–ü–ï–®–ù–û! –≠—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."
            exit 1
          }
        }

    - name: Notify Telegram
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          üöÄ Deploy Status: ${{ job.status }}
          üì¶ Repository: gongbu-platform
          üåê Environment: Production
          üîó URL: ${{ secrets.API_BASE_URL }}