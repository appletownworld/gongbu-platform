name: 🚀 Deploy Gongbu Platform to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build:
    name: 🏗️ Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - auth-service
          - course-service
          - bot-service
          - payment-service
          - notification-service
          - web-app
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build web app separately (different context)
  build-webapp:
    name: 🌐 Build Web App
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Web App image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web-app
          file: ./apps/web-app/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VITE_API_BASE_URL=${{ secrets.API_BASE_URL }}
            VITE_WEBSOCKET_URL=${{ secrets.WEBSOCKET_URL }}

  # Deploy to VPS
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build, build-webapp]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ secrets.APP_URL }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: 📤 Copy deployment files to VPS
        run: |
          # Copy necessary files to VPS
          scp -o StrictHostKeyChecking=no -r \
            docker-compose.prod.yml \
            infrastructure/ \
            deploy.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/gongbu-platform/

      - name: 📋 Create environment file
        run: |
          # Create .env file on VPS with secrets
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /home/${{ secrets.VPS_USER }}/gongbu-platform
            cat > .env << 'ENVEOF'
          NODE_ENV=production
          DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}
          
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_WEBAPP_SECRET=${{ secrets.TELEGRAM_WEBAPP_SECRET }}
          ADMIN_USER_IDS=${{ secrets.ADMIN_USER_IDS }}
          
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          ENVEOF
          EOF

      - name: 🔐 Login to Container Registry on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          EOF

      - name: 📥 Pull latest images
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /home/${{ secrets.VPS_USER }}/gongbu-platform
            
            # Update docker-compose to use registry images
            sed -i 's|build:|# build:|g' docker-compose.prod.yml
            sed -i 's|context:|# context:|g' docker-compose.prod.yml
            sed -i 's|dockerfile:|# dockerfile:|g' docker-compose.prod.yml
            
            # Add image references
            services=("auth-service" "course-service" "bot-service" "payment-service" "notification-service" "web-app")
            for service in "${services[@]}"; do
              sed -i "/${service}:/a\\    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:latest" docker-compose.prod.yml
            done
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
          EOF

      - name: 🚀 Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /home/${{ secrets.VPS_USER }}/gongbu-platform
            
            # Run deployment script
            chmod +x deploy.sh
            ./deploy.sh
          EOF

      - name: 🔍 Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /home/${{ secrets.VPS_USER }}/gongbu-platform
            
            # Wait for services to be ready
            sleep 30
            
            # Check service health
            ./health-check.sh || exit 1
            
            echo "✅ Deployment successful!"
            echo "🌐 Web App: https://${{ secrets.DOMAIN_NAME }}"
            echo "📊 Grafana: https://${{ secrets.DOMAIN_NAME }}/grafana"
          EOF

      - name: 📢 Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 Gongbu Platform deployment ${{ job.status }}!
            
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            
            ${{ job.status == 'success' && '✅ All services are running' || '❌ Deployment failed' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: contains(secrets.SLACK_WEBHOOK_URL, 'hooks.slack.com')
