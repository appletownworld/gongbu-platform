name: Deploy to VPS

on:
  workflow_dispatch:  # Ручной запуск через GitHub UI
  push:               # ✅ Автоматический деплой включен!
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Деплой в домашней директории пользователя (БЕЗ SUDO!)
          cd ~/gongbu-platform || (git clone https://github.com/appletownworld/gongbu-platform.git ~/gongbu-platform && cd ~/gongbu-platform)
          git pull origin main
          
          # Создание .env из секретов GitHub
          cat > .env << 'EOF'
          NODE_ENV=production
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}
          WEBAPP_URL=${{ secrets.APP_URL }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          REDIS_URL=redis://localhost:6379
          EOF
          
          # Добавление пользователя в docker группу (если еще не добавлен)
          groups $USER | grep -q docker || (echo "⚠️ Пользователь не в группе docker. Добавьте: sudo usermod -aG docker $USER && exit")
          
          # Остановка старых контейнеров
          docker-compose -f docker-compose.prod.yml down || true
          
          # Очистка системы Docker
          docker system prune -f || echo "⚠️ Docker system prune failed, continuing..."
          
          # Запуск продакшн системы
          docker-compose -f docker-compose.prod.yml up -d --build
          
          # Ожидание готовности системы
          echo "⏳ Ожидание запуска системы..."
          for i in {1..30}; do
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "✅ Контейнеры запущены"
              break
            fi
            echo "⏳ Ожидание запуска контейнеров ($i/30)..."
            sleep 5
          done
          
          # Проверка статуса всех сервисов
          echo "📊 Статус сервисов:"
          docker-compose -f docker-compose.prod.yml ps
          
          # Проверка логов при ошибках
          if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "❌ Есть проблемы с контейнерами. Логи:"
            docker-compose -f docker-compose.prod.yml logs --tail=50
          fi

    - name: Wait for HTTPS (smart retry)
      run: |
        echo "🔍 Ожидание готовности HTTPS endpoint..."
        APP_URL="${{ secrets.APP_URL }}"
        DOMAIN_URL="${APP_URL:-https://gongbu.appletownworld.com}"
        
        curl -fsS "$DOMAIN_URL/health" \
          --retry 20 --retry-all-errors --retry-delay 5 --max-time 10 \
          --retry-connrefused || {
          echo "❌ HTTPS health check не удался, пробуем HTTP..."
          HTTP_URL=$(echo "$DOMAIN_URL" | sed 's/https:/http:/')
          curl -fsS "$HTTP_URL/health" \
            --retry 10 --retry-all-errors --retry-delay 3 --max-time 8
        }

    - name: Notify Telegram
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          🚀 Deploy Status: ${{ job.status }}
          📦 Repository: gongbu-platform
          🌐 Environment: Production
          🔗 URL: ${{ secrets.API_BASE_URL }}