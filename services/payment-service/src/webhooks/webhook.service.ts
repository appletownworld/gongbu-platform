import { Injectable, Logger, BadRequestException, InternalServerErrorException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import Stripe from 'stripe';
import { PaymentService } from '../payment/payment.service';
import { PrismaService } from '../database/prisma.service';
import { PaymentStatus, PaymentProvider, SubscriptionStatus } from '@prisma/client';

interface WebhookResult {
  eventId: string;
  eventType: string;
  processed: boolean;
  message?: string;
}

interface TestWebhookRequest {
  provider: 'stripe' | 'yookassa';
  eventType: string;
  paymentId?: string;
  data?: any;
}

@Injectable()
export class WebhookService {
  private readonly logger = new Logger(WebhookService.name);
  private stripe?: Stripe;
  private stripeWebhookSecret?: string;

  constructor(
    private readonly configService: ConfigService,
    private readonly paymentService: PaymentService,
    private readonly prisma: PrismaService,
  ) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    const stripeSecretKey = this.configService.get('STRIPE_SECRET_KEY');
    this.stripeWebhookSecret = this.configService.get('STRIPE_WEBHOOK_SECRET');
    
    if (stripeSecretKey) {
      this.stripe = new Stripe(stripeSecretKey, {
        apiVersion: '2023-10-16',
      });
      this.logger.log('‚úÖ Stripe webhook handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }

  async handleStripeWebhook(rawBody: Buffer, signature: string): Promise<WebhookResult> {
    if (!this.stripe || !this.stripeWebhookSecret) {
      throw new BadRequestException('Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    let event: Stripe.Event;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook'–∞
      event = this.stripe.webhooks.constructEvent(
        rawBody,
        signature,
        this.stripeWebhookSecret
      );
    } catch (err) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Stripe webhook: ${err.message}`);
      throw new BadRequestException(`Webhook signature verification failed: ${err.message}`);
    }

    this.logger.debug(`üì• Stripe webhook —Å–æ–±—ã—Ç–∏–µ: ${event.type}`, {
      eventId: event.id,
      livemode: event.livemode,
    });

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
      await this.saveWebhookEvent(event.id, event.type, PaymentProvider.STRIPE, event);

      let processed = false;

      switch (event.type) {
        case 'payment_intent.succeeded':
          processed = await this.handleStripePaymentSucceeded(event.data.object as Stripe.PaymentIntent);
          break;

        case 'payment_intent.payment_failed':
          processed = await this.handleStripePaymentFailed(event.data.object as Stripe.PaymentIntent);
          break;

        case 'payment_intent.canceled':
          processed = await this.handleStripePaymentCanceled(event.data.object as Stripe.PaymentIntent);
          break;

        case 'charge.dispute.created':
          processed = await this.handleStripeChargeDispute(event.data.object as Stripe.Dispute);
          break;

        case 'invoice.payment_succeeded':
          processed = await this.handleStripeInvoicePaymentSucceeded(event.data.object as Stripe.Invoice);
          break;

        case 'invoice.payment_failed':
          processed = await this.handleStripeInvoicePaymentFailed(event.data.object as Stripe.Invoice);
          break;

        case 'customer.subscription.created':
          processed = await this.handleStripeSubscriptionCreated(event.data.object as Stripe.Subscription);
          break;

        case 'customer.subscription.updated':
          processed = await this.handleStripeSubscriptionUpdated(event.data.object as Stripe.Subscription);
          break;

        case 'customer.subscription.deleted':
          processed = await this.handleStripeSubscriptionDeleted(event.data.object as Stripe.Subscription);
          break;

        default:
          this.logger.log(`‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ Stripe —Å–æ–±—ã—Ç–∏–µ: ${event.type}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.`);
          processed = false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
      await this.updateWebhookEvent(event.id, processed);

      return {
        eventId: event.id,
        eventType: event.type,
        processed,
        message: processed ? '–°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ' : '–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe webhook ${event.type}:`, error);
      await this.updateWebhookEvent(event.id, false, error.message);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook');
    }
  }

  async handleYooKassaWebhook(body: any, headers: Record<string, string>): Promise<WebhookResult> {
    this.logger.debug('üì• YooKassa webhook —Å–æ–±—ã—Ç–∏–µ', {
      type: body.event,
      objectId: body.object?.id,
    });

    try {
      const eventId = `yookassa_${body.object?.id || Date.now()}_${body.event}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
      await this.saveWebhookEvent(eventId, body.event, PaymentProvider.YOOKASSA, body);

      let processed = false;

      switch (body.event) {
        case 'payment.succeeded':
          processed = await this.handleYooKassaPaymentSucceeded(body.object);
          break;

        case 'payment.canceled':
          processed = await this.handleYooKassaPaymentCanceled(body.object);
          break;

        case 'payment.waiting_for_capture':
          processed = await this.handleYooKassaPaymentWaitingForCapture(body.object);
          break;

        case 'refund.succeeded':
          processed = await this.handleYooKassaRefundSucceeded(body.object);
          break;

        case 'refund.canceled':
          processed = await this.handleYooKassaRefundCanceled(body.object);
          break;

        default:
          this.logger.log(`‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ YooKassa —Å–æ–±—ã—Ç–∏–µ: ${body.event}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.`);
          processed = false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
      await this.updateWebhookEvent(eventId, processed);

      return {
        eventId,
        eventType: body.event,
        processed,
        message: processed ? '–°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ' : '–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa webhook:`, error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook');
    }
  }

  async handleTestWebhook(request: TestWebhookRequest): Promise<WebhookResult> {
    this.logger.log(`üß™ –û–±—Ä–∞–±–æ—Ç–∫–∞ test webhook: ${request.provider} - ${request.eventType}`);

    const eventId = `test_${Date.now()}_${request.eventType}`;

    try {
      await this.saveWebhookEvent(eventId, request.eventType, 
        request.provider === 'stripe' ? PaymentProvider.STRIPE : PaymentProvider.YOOKASSA, 
        request.data
      );

      let processed = false;

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      if (request.eventType === 'payment.succeeded' && request.paymentId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        await this.prisma.payment.updateMany({
          where: { 
            OR: [
              { id: request.paymentId },
              { externalId: request.paymentId },
              { orderNumber: request.paymentId },
            ]
          },
          data: {
            status: PaymentStatus.COMPLETED,
            completedAt: new Date(),
            providerData: {
              ...request.data,
              testWebhook: true,
            },
          },
        });

        this.logger.log(`‚úÖ Test: –ü–ª–∞—Ç–µ–∂ ${request.paymentId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π`);
        processed = true;
      }

      await this.updateWebhookEvent(eventId, processed);

      return {
        eventId,
        eventType: request.eventType,
        processed,
        message: processed ? 'Test webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ' : 'Test webhook –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω',
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ test webhook:`, error);
      await this.updateWebhookEvent(eventId, false, error.message);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ test webhook');
    }
  }

  // Stripe Event Handlers
  private async handleStripePaymentSucceeded(paymentIntent: Stripe.PaymentIntent): Promise<boolean> {
    try {
      const updated = await this.prisma.payment.updateMany({
        where: { externalId: paymentIntent.id },
        data: {
          status: PaymentStatus.COMPLETED,
          completedAt: new Date(),
          providerData: paymentIntent as any,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`‚úÖ Stripe: –ü–ª–∞—Ç–µ–∂ ${paymentIntent.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π`);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É (–æ—Ç–ø—Ä–∞–≤–∫–∞ email, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä—Å–∞ –∏ —Ç.–¥.)
        await this.onPaymentSuccess(paymentIntent.id);
        
        return true;
      } else {
        this.logger.warn(`‚ö†Ô∏è Stripe: –ü–ª–∞—Ç–µ–∂ ${paymentIntent.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
        return false;
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe payment.succeeded:`, error);
      throw error;
    }
  }

  private async handleStripePaymentFailed(paymentIntent: Stripe.PaymentIntent): Promise<boolean> {
    try {
      const updated = await this.prisma.payment.updateMany({
        where: { externalId: paymentIntent.id },
        data: {
          status: PaymentStatus.FAILED,
          providerData: paymentIntent as any,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`‚ùå Stripe: –ü–ª–∞—Ç–µ–∂ ${paymentIntent.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π`);
        return true;
      }
      return false;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe payment.failed:`, error);
      throw error;
    }
  }

  private async handleStripePaymentCanceled(paymentIntent: Stripe.PaymentIntent): Promise<boolean> {
    try {
      const updated = await this.prisma.payment.updateMany({
        where: { externalId: paymentIntent.id },
        data: {
          status: PaymentStatus.CANCELLED,
          providerData: paymentIntent as any,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`üö´ Stripe: –ü–ª–∞—Ç–µ–∂ ${paymentIntent.id} –æ—Ç–º–µ–Ω–µ–Ω`);
        return true;
      }
      return false;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe payment.canceled:`, error);
      throw error;
    }
  }

  private async handleStripeChargeDispute(dispute: Stripe.Dispute): Promise<boolean> {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∏—Å–ø—É—Ç–µ/—á–∞—Ä–¥–∂–±–µ–∫–µ
      this.logger.warn(`‚ö†Ô∏è Stripe: –°–æ–∑–¥–∞–Ω –¥–∏—Å–ø—É—Ç –¥–ª—è charge ${dispute.charge}`, {
        disputeId: dispute.id,
        amount: dispute.amount,
        reason: dispute.reason,
      });

      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe dispute:`, error);
      throw error;
    }
  }

  private async handleStripeInvoicePaymentSucceeded(invoice: Stripe.Invoice): Promise<boolean> {
    try {
      if (invoice.subscription) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏–Ω–≤–æ–π—Å–∞
        await this.prisma.subscription.updateMany({
          where: { externalId: invoice.subscription as string },
          data: {
            status: SubscriptionStatus.ACTIVE,
            currentPeriodStart: new Date(invoice.period_start * 1000),
            currentPeriodEnd: new Date(invoice.period_end * 1000),
          },
        });

        this.logger.log(`‚úÖ Stripe: –ü–æ–¥–ø–∏—Å–∫–∞ ${invoice.subscription} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –∏–Ω–≤–æ–π—Å`);
      }
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe invoice.payment_succeeded:`, error);
      throw error;
    }
  }

  private async handleStripeInvoicePaymentFailed(invoice: Stripe.Invoice): Promise<boolean> {
    try {
      if (invoice.subscription) {
        // –ü–æ–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏–Ω–≤–æ–π—Å–∞
        await this.prisma.subscription.updateMany({
          where: { externalId: invoice.subscription as string },
          data: {
            status: SubscriptionStatus.PAST_DUE,
          },
        });

        this.logger.warn(`‚ö†Ô∏è Stripe: –ü–æ–¥–ø–∏—Å–∫–∞ ${invoice.subscription} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞`);
      }
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe invoice.payment_failed:`, error);
      throw error;
    }
  }

  private async handleStripeSubscriptionCreated(subscription: Stripe.Subscription): Promise<boolean> {
    try {
      await this.prisma.subscription.updateMany({
        where: { externalId: subscription.id },
        data: {
          status: subscription.status === 'active' ? SubscriptionStatus.ACTIVE : 
                 subscription.status === 'trialing' ? SubscriptionStatus.TRIALING :
                 subscription.status === 'past_due' ? SubscriptionStatus.PAST_DUE :
                 subscription.status === 'canceled' ? SubscriptionStatus.CANCELLED :
                 subscription.status === 'unpaid' ? SubscriptionStatus.UNPAID : SubscriptionStatus.ACTIVE,
          currentPeriodStart: new Date(subscription.current_period_start * 1000),
          currentPeriodEnd: new Date(subscription.current_period_end * 1000),
          providerData: subscription as any,
        },
      });

      this.logger.log(`‚úÖ Stripe: –ü–æ–¥–ø–∏—Å–∫–∞ ${subscription.id} —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe subscription.created:`, error);
      throw error;
    }
  }

  private async handleStripeSubscriptionUpdated(subscription: Stripe.Subscription): Promise<boolean> {
    return this.handleStripeSubscriptionCreated(subscription); // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
  }

  private async handleStripeSubscriptionDeleted(subscription: Stripe.Subscription): Promise<boolean> {
    try {
      await this.prisma.subscription.updateMany({
        where: { externalId: subscription.id },
        data: {
          status: SubscriptionStatus.CANCELLED,
          canceledAt: new Date(),
          providerData: subscription as any,
        },
      });

      this.logger.log(`üö´ Stripe: –ü–æ–¥–ø–∏—Å–∫–∞ ${subscription.id} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe subscription.deleted:`, error);
      throw error;
    }
  }

  // YooKassa Event Handlers
  private async handleYooKassaPaymentSucceeded(payment: any): Promise<boolean> {
    try {
      const updated = await this.prisma.payment.updateMany({
        where: { externalId: payment.id },
        data: {
          status: PaymentStatus.COMPLETED,
          completedAt: new Date(),
          providerData: payment,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`‚úÖ YooKassa: –ü–ª–∞—Ç–µ–∂ ${payment.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π`);
        
        await this.onPaymentSuccess(payment.id);
        
        return true;
      } else {
        this.logger.warn(`‚ö†Ô∏è YooKassa: –ü–ª–∞—Ç–µ–∂ ${payment.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
        return false;
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa payment.succeeded:`, error);
      throw error;
    }
  }

  private async handleYooKassaPaymentCanceled(payment: any): Promise<boolean> {
    try {
      const updated = await this.prisma.payment.updateMany({
        where: { externalId: payment.id },
        data: {
          status: PaymentStatus.CANCELLED,
          providerData: payment,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`üö´ YooKassa: –ü–ª–∞—Ç–µ–∂ ${payment.id} –æ—Ç–º–µ–Ω–µ–Ω`);
        return true;
      }
      return false;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa payment.canceled:`, error);
      throw error;
    }
  }

  private async handleYooKassaPaymentWaitingForCapture(payment: any): Promise<boolean> {
    try {
      const updated = await this.prisma.payment.updateMany({
        where: { externalId: payment.id },
        data: {
          status: PaymentStatus.PROCESSING,
          providerData: payment,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`‚è≥ YooKassa: –ü–ª–∞—Ç–µ–∂ ${payment.id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`);
        return true;
      }
      return false;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa payment.waiting_for_capture:`, error);
      throw error;
    }
  }

  private async handleYooKassaRefundSucceeded(refund: any): Promise<boolean> {
    try {
      const updated = await this.prisma.refund.updateMany({
        where: { externalId: refund.id },
        data: {
          status: 'COMPLETED',
          processedAt: new Date(),
          providerData: refund,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`‚úÖ YooKassa: –í–æ–∑–≤—Ä–∞—Ç ${refund.id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        return true;
      }
      return false;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa refund.succeeded:`, error);
      throw error;
    }
  }

  private async handleYooKassaRefundCanceled(refund: any): Promise<boolean> {
    try {
      const updated = await this.prisma.refund.updateMany({
        where: { externalId: refund.id },
        data: {
          status: 'FAILED',
          providerData: refund,
        },
      });

      if (updated.count > 0) {
        this.logger.log(`‚ùå YooKassa: –í–æ–∑–≤—Ä–∞—Ç ${refund.id} –æ—Ç–º–µ–Ω–µ–Ω`);
        return true;
      }
      return false;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa refund.canceled:`, error);
      throw error;
    }
  }

  // Utility Methods
  private async saveWebhookEvent(
    eventId: string,
    eventType: string,
    provider: PaymentProvider,
    data: any
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
      const existingEvent = await this.prisma.webhookEvent.findUnique({
        where: { eventId },
      });

      if (existingEvent) {
        this.logger.log(`‚ÑπÔ∏è Webhook —Å–æ–±—ã—Ç–∏–µ ${eventId} —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
        return;
      }

      await this.prisma.webhookEvent.create({
        data: {
          eventId,
          eventType,
          provider,
          data,
          processed: false,
          receivedAt: new Date(),
        },
      });

      this.logger.debug(`üìù Webhook —Å–æ–±—ã—Ç–∏–µ ${eventId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏—è:`, error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
  }

  private async updateWebhookEvent(
    eventId: string,
    processed: boolean,
    errorMessage?: string
  ): Promise<void> {
    try {
      await this.prisma.webhookEvent.update({
        where: { eventId },
        data: {
          processed,
          processedAt: processed ? new Date() : null,
          errorMessage: errorMessage || null,
          updatedAt: new Date(),
        },
      });

      this.logger.debug(`üîÑ Webhook —Å–æ–±—ã—Ç–∏–µ ${eventId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: processed=${processed}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏—è:`, error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
  }

  private async onPaymentSuccess(externalPaymentId: string): Promise<void> {
    try {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
      // –ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ email, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä—Å–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.
      
      const payment = await this.prisma.payment.findFirst({
        where: { externalId: externalPaymentId },
        include: {
          course: true,
        },
      });

      if (payment) {
        this.logger.log(`üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: ${payment.orderNumber}`, {
          userId: payment.userId,
          amount: payment.amount,
          currency: payment.currency,
          courseId: payment.courseId,
        });

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        // - –û—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        // - –ê–∫—Ç–∏–≤–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É
        // - –ó–∞–ø–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        // - Webhook'–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ onPaymentSuccess:`, error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É webhook'–∞
    }
  }
}
