import { Injectable, Logger } from '@nestjs/common';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { BotContext } from '../bot/bot.service';
import { AuthClientService, AuthUser } from '../integrations/auth-client.service';
import { CourseClientService, Course, CourseList } from '../integrations/course-client.service';

@Injectable()
export class CourseCommandsService {
  private readonly logger = new Logger(CourseCommandsService.name);

  constructor(
    private readonly authClient: AuthClientService,
    private readonly courseClient: CourseClientService,
  ) {}

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /courses - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
   */
  async handleCoursesCommand(ctx: BotContext): Promise<void> {
    try {
      await ctx.reply('üìö –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã...');

      const coursesData = await this.courseClient.getCourses({
        page: 1,
        limit: 5,
      });

      if (!coursesData.courses || coursesData.courses.length === 0) {
        await ctx.editMessageText('üìö –ö—É—Ä—Å—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      const courseList = this.formatCourseList(coursesData);
      const keyboard = this.createCoursesKeyboard(coursesData.courses, coursesData.pagination);

      await ctx.editMessageText(courseList, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error in courses command:', error.message);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /my_courses - –º–æ–∏ –∫—É—Ä—Å—ã
   */
  async handleMyCoursesCommand(ctx: BotContext): Promise<void> {
    try {
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      await ctx.reply('üìñ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∫—É—Ä—Å—ã...');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Auth Service
      const user = await this.authClient.createOrGetUser(ctx.from);
      const userCourses = await this.courseClient.getUserCourses(user.id);

      if (!userCourses.enrolled || userCourses.enrolled.length === 0) {
        await ctx.editMessageText(
          'üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /courses —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã', callback_data: 'show_all_courses' }],
              ],
            },
          }
        );
        return;
      }

      const message = this.formatUserCourses(userCourses);
      const keyboard = this.createMyCoursesKeyboard(userCourses);

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error in my_courses command:', error.message);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤
   */
  async handleSearchCommand(ctx: BotContext, query: string): Promise<void> {
    try {
      if (!query || query.trim().length < 2) {
        await ctx.reply(
          'üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          '<code>/search –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</code>',
          { parse_mode: 'HTML' }
        );
        return;
      }

      await ctx.reply(`üîç –ò—â—É –∫—É—Ä—Å—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);

      const courses = await this.courseClient.searchCourses(query, 5);

      if (!courses || courses.length === 0) {
        await ctx.editMessageText(
          `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –∫—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n` +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìö –í—Å–µ –∫—É—Ä—Å—ã', callback_data: 'show_all_courses' }],
              ],
            },
          }
        );
        return;
      }

      const courseList = this.formatSearchResults(courses, query);
      const keyboard = this.createSearchResultsKeyboard(courses);

      await ctx.editMessageText(courseList, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error in search command:', error.message);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
   */
  async showCourseDetails(ctx: BotContext, courseId: string): Promise<void> {
    try {
      const course = await this.courseClient.getCourseById(courseId);
      
      if (!course) {
        await ctx.answerCbQuery('‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const courseDetails = this.formatCourseDetails(course);
      const keyboard = this.createCourseDetailsKeyboard(course);

      await ctx.editMessageText(courseDetails, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

      await ctx.answerCbQuery();

    } catch (error) {
      this.logger.error('Error showing course details:', error.message);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
   */
  private formatCourseList(coursesData: CourseList): string {
    const { courses, pagination } = coursesData;
    
    let message = 'üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n';

    courses.forEach((course, index) => {
      const stars = '‚≠ê'.repeat(Math.floor(course.rating));
      const price = course.price > 0 ? `${course.price} ${course.currency}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
      
      message += `<b>${index + 1}. ${course.title}</b>\n`;
      message += `${course.shortDescription || course.description.substring(0, 100)}...\n`;
      message += `${stars} ${course.rating} (${course.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)\n`;
      message += `üí∞ ${price} ‚Ä¢ üë• ${course.studentCount} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n`;
      message += `‚è± ${course.lessonCount} —É—Ä–æ–∫–æ–≤ ‚Ä¢ üìä ${course.difficulty}\n\n`;
    });

    message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.page} –∏–∑ ${pagination.totalPages}\n`;
    message += `üìä –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: ${pagination.totalItems}`;

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private formatUserCourses(userCourses: {
    enrolled: Course[];
    completed: Course[];
    inProgress: Course[];
  }): string {
    let message = 'üìñ <b>–ú–æ–∏ –∫—É—Ä—Å—ã</b>\n\n';

    if (userCourses.inProgress.length > 0) {
      message += 'üî• <b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è:</b>\n';
      userCourses.inProgress.forEach((course, index) => {
        message += `${index + 1}. ${course.title}\n`;
      });
      message += '\n';
    }

    if (userCourses.completed.length > 0) {
      message += '‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n';
      userCourses.completed.forEach((course, index) => {
        message += `${index + 1}. ${course.title}\n`;
      });
      message += '\n';
    }

    if (userCourses.enrolled.length > 0 && userCourses.inProgress.length === 0 && userCourses.completed.length === 0) {
      message += 'üìö <b>–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n';
      userCourses.enrolled.forEach((course, index) => {
        message += `${index + 1}. ${course.title}\n`;
      });
    }

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  private formatSearchResults(courses: Course[], query: string): string {
    let message = `üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"</b>\n\n`;

    courses.forEach((course, index) => {
      const stars = '‚≠ê'.repeat(Math.floor(course.rating));
      const price = course.price > 0 ? `${course.price} ${course.currency}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
      
      message += `<b>${index + 1}. ${course.title}</b>\n`;
      message += `${course.shortDescription || course.description.substring(0, 100)}...\n`;
      message += `${stars} ${course.rating} ‚Ä¢ üí∞ ${price}\n\n`;
    });

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
   */
  private formatCourseDetails(course: Course): string {
    const stars = '‚≠ê'.repeat(Math.floor(course.rating));
    const price = course.price > 0 ? `${course.price} ${course.currency}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
    const duration = course.duration ? `${Math.floor(course.duration / 60)} —á–∞—Å–æ–≤` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    let message = `üìö <b>${course.title}</b>\n\n`;
    message += `${course.description}\n\n`;
    message += `üë®‚Äçüè´ <b>–ê–≤—Ç–æ—Ä:</b> ${course.author.name}\n`;
    message += `üí∞ <b>–¶–µ–Ω–∞:</b> ${price}\n`;
    message += `üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${course.difficulty}\n`;
    message += `üè∑ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${course.category}\n`;
    message += `‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${duration}\n`;
    message += `üìñ <b>–£—Ä–æ–∫–æ–≤:</b> ${course.lessonCount}\n`;
    message += `üë• <b>–°—Ç—É–¥–µ–Ω—Ç–æ–≤:</b> ${course.studentCount}\n`;
    message += `${stars} <b>–†–µ–π—Ç–∏–Ω–≥:</b> ${course.rating} (${course.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)\n\n`;

    if (course.tags && course.tags.length > 0) {
      message += `üè∑ <b>–¢–µ–≥–∏:</b> ${course.tags.map(tag => `#${tag}`).join(' ')}\n`;
    }

    return message;
  }

  /**
   * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
   */
  private createCoursesKeyboard(courses: Course[], pagination: any): InlineKeyboardButton[][] {
    const keyboard: InlineKeyboardButton[][] = [];

    // –ö–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
    for (let i = 0; i < courses.length; i += 2) {
      const row: InlineKeyboardButton[] = [];
      
      row.push({
        text: `${i + 1}. ${courses[i].title.substring(0, 20)}...`,
        callback_data: `course_${courses[i].id}`,
      });

      if (i + 1 < courses.length) {
        row.push({
          text: `${i + 2}. ${courses[i + 1].title.substring(0, 20)}...`,
          callback_data: `course_${courses[i + 1].id}`,
        });
      }

      keyboard.push(row);
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const navRow: InlineKeyboardButton[] = [];
    if (pagination.hasPrev) {
      navRow.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `courses_page_${pagination.page - 1}` });
    }
    if (pagination.hasNext) {
      navRow.push({ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: `courses_page_${pagination.page + 1}` });
    }
    
    if (navRow.length > 0) {
      keyboard.push(navRow);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.push([
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_courses' },
      { text: 'üìñ –ú–æ–∏ –∫—É—Ä—Å—ã', callback_data: 'my_courses' },
    ]);

    return keyboard;
  }

  /**
   * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–∏—Ö –∫—É—Ä—Å–æ–≤
   */
  private createMyCoursesKeyboard(userCourses: {
    enrolled: Course[];
    completed: Course[];
    inProgress: Course[];
  }): InlineKeyboardButton[][] {
    const keyboard: InlineKeyboardButton[][] = [];

    // –ö—É—Ä—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è
    userCourses.inProgress.forEach((course, index) => {
      keyboard.push([{
        text: `üî• ${course.title}`,
        callback_data: `my_course_${course.id}`,
      }]);
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    userCourses.completed.forEach((course, index) => {
      keyboard.push([{
        text: `‚úÖ ${course.title}`,
        callback_data: `completed_course_${course.id}`,
      }]);
    });

    // –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    userCourses.enrolled.forEach((course, index) => {
      keyboard.push([{
        text: `üìö ${course.title}`,
        callback_data: `enrolled_course_${course.id}`,
      }]);
    });

    keyboard.push([
      { text: 'üìö –í—Å–µ –∫—É—Ä—Å—ã', callback_data: 'show_all_courses' },
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_courses' },
    ]);

    return keyboard;
  }

  /**
   * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  private createSearchResultsKeyboard(courses: Course[]): InlineKeyboardButton[][] {
    const keyboard: InlineKeyboardButton[][] = [];

    courses.forEach((course, index) => {
      keyboard.push([{
        text: `${index + 1}. ${course.title}`,
        callback_data: `course_${course.id}`,
      }]);
    });

    keyboard.push([
      { text: 'üìö –í—Å–µ –∫—É—Ä—Å—ã', callback_data: 'show_all_courses' },
      { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_courses' },
    ]);

    return keyboard;
  }

  /**
   * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
   */
  private createCourseDetailsKeyboard(course: Course): InlineKeyboardButton[][] {
    const keyboard: InlineKeyboardButton[][] = [];

    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if (course.price > 0) {
      keyboard.push([{
        text: `üí≥ –ö—É–ø–∏—Ç—å –∑–∞ ${course.price} ${course.currency}`,
        callback_data: `buy_course_${course.id}`,
      }]);
    } else {
      keyboard.push([{
        text: 'üéØ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
        callback_data: `enroll_course_${course.id}`,
      }]);
    }

    keyboard.push([
      { text: 'üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É', callback_data: `lessons_${course.id}` },
      { text: 'üë®‚Äçüè´ –û–± –∞–≤—Ç–æ—Ä–µ', callback_data: `author_${course.author.id}` },
    ]);

    keyboard.push([
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', callback_data: 'show_all_courses' },
    ]);

    return keyboard;
  }
}
