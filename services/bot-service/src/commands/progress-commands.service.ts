import { Injectable, Logger } from '@nestjs/common';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { BotContext } from '../bot/bot.service';
import { AuthClientService } from '../integrations/auth-client.service';
import { CourseClientService } from '../integrations/course-client.service';

@Injectable()
export class ProgressCommandsService {
  private readonly logger = new Logger(ProgressCommandsService.name);

  constructor(
    private readonly authClient: AuthClientService,
    private readonly courseClient: CourseClientService,
  ) {}

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /progress - –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleProgressCommand(ctx: BotContext): Promise<void> {
    try {
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      await ctx.reply('üìä –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Auth Service
      const user = await this.authClient.createOrGetUser(ctx.from);
      const userCourses = await this.courseClient.getUserCourses(user.id);

      if (!userCourses.inProgress || userCourses.inProgress.length === 0) {
        await ctx.editMessageText(
          'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n\n' +
          '–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ, –∑–∞–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ –∫—É—Ä—Å!',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã', callback_data: 'show_all_courses' }],
              ],
            },
          }
        );
        return;
      }

      const message = this.formatProgressOverview(userCourses);
      const keyboard = this.createProgressOverviewKeyboard(userCourses.inProgress);

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error in progress command:', error.message);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É
   */
  async showCourseProgress(ctx: BotContext, courseId: string): Promise<void> {
    try {
      if (!ctx.from) {
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const user = await this.authClient.createOrGetUser(ctx.from);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Progress Service)
      const courseProgress = await this.getCourseProgress(user.id, courseId);
      
      if (!courseProgress) {
        await ctx.answerCbQuery('‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const message = this.formatCourseProgress(courseProgress);
      const keyboard = this.createCourseProgressKeyboard(courseProgress);

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

      await ctx.answerCbQuery();

    } catch (error) {
      this.logger.error('Error showing course progress:', error.message);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /achievements - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleAchievementsCommand(ctx: BotContext): Promise<void> {
    try {
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const user = await this.authClient.createOrGetUser(ctx.from);
      const userCourses = await this.courseClient.getUserCourses(user.id);

      const achievements = this.calculateAchievements(userCourses);
      const message = this.formatAchievements(achievements);
      const keyboard = this.createAchievementsKeyboard(achievements);

      await ctx.reply(message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error in achievements command:', error.message);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async handleWeeklyReportCommand(ctx: BotContext): Promise<void> {
    try {
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      await ctx.reply('üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...');

      const user = await this.authClient.createOrGetUser(ctx.from);
      const weeklyReport = await this.generateWeeklyReport(user.id);

      const message = this.formatWeeklyReport(weeklyReport);
      const keyboard = this.createWeeklyReportKeyboard();

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error in weekly report command:', error.message);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  private formatProgressOverview(userCourses: any): string {
    const { enrolled, completed, inProgress } = userCourses;
    
    let message = 'üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</b>\n\n';
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += 'üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n';
    message += `üìö –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: ${enrolled.length}\n`;
    message += `üî• –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${inProgress.length}\n`;
    message += `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completed.length}\n\n`;

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã
    if (inProgress.length > 0) {
      message += 'üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n';
      inProgress.slice(0, 3).forEach((course, index) => {
        const progress = course.progress?.progressPercentage || 0;
        const progressBar = this.createProgressBar(progress);
        
        message += `${index + 1}. <b>${course.title}</b>\n`;
        message += `${progressBar} ${progress}%\n`;
        message += `‚è± ${this.formatTimeSpent(course.progress?.timeSpent || 0)}\n\n`;
      });

      if (inProgress.length > 3) {
        message += `... –∏ –µ—â–µ ${inProgress.length - 3} –∫—É—Ä—Å–æ–≤\n\n`;
      }
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const recentAchievements = this.getRecentAchievements(completed);
    if (recentAchievements.length > 0) {
      message += 'üèÜ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n';
      recentAchievements.forEach(achievement => {
        message += `${achievement.icon} ${achievement.title}\n`;
      });
    }

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É
   */
  private formatCourseProgress(courseProgress: any): string {
    let message = `üìö <b>${courseProgress.courseTitle}</b>\n\n`;
    
    const progress = courseProgress.progressPercentage || 0;
    const progressBar = this.createProgressBar(progress);
    
    message += `${progressBar} <b>${progress}%</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n`;
    message += `üìñ –£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: ${courseProgress.completedLessons}/${courseProgress.totalLessons}\n`;
    message += `‚è± –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ${this.formatTimeSpent(courseProgress.timeSpent)}\n`;
    message += `üìÖ –ù–∞—á–∞—Ç–æ: ${courseProgress.enrolledAt?.toLocaleDateString('ru-RU')}\n`;
    
    if (courseProgress.lastAccessedAt) {
      message += `üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: ${courseProgress.lastAccessedAt.toLocaleDateString('ru-RU')}\n`;
    }
    
    message += '\n';

    // –°–ª–µ–¥—É—é—â–∏–µ —É—Ä–æ–∫–∏
    if (courseProgress.nextLessons && courseProgress.nextLessons.length > 0) {
      message += 'üìñ <b>–°–ª–µ–¥—É—é—â–∏–µ —É—Ä–æ–∫–∏:</b>\n';
      courseProgress.nextLessons.slice(0, 3).forEach((lesson, index) => {
        message += `${index + 1}. ${lesson.title}\n`;
      });
      message += '\n';
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞
    if (progress >= 100) {
      message += 'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞!</b>\n';
      if (!courseProgress.certificateIssued) {
        message += 'üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ\n';
      }
    } else if (progress > 0) {
      const estimatedCompletion = this.estimateCompletionTime(courseProgress);
      message += `‚è≥ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${estimatedCompletion}\n`;
    }

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  private formatAchievements(achievements: any): string {
    let message = 'üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n';
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += '‚≠ê <b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n';
    achievements.main.forEach(achievement => {
      const status = achievement.unlocked ? '‚úÖ' : 'üîí';
      message += `${status} ${achievement.title}\n`;
      message += `   ${achievement.description}\n\n`;
    });

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (achievements.nextAchievement) {
      message += 'üéØ <b>–°–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b>\n';
      message += `${achievements.nextAchievement.title}\n`;
      message += `${achievements.nextAchievement.description}\n`;
      message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${achievements.nextAchievement.progress}%\n\n`;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n';
    message += `üèÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievements.unlockedCount}/${achievements.totalCount}\n`;
    message += `üìö –ö—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${achievements.stats.completedCourses}\n`;
    message += `‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ${this.formatTimeSpent(achievements.stats.totalTime)}\n`;

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  private formatWeeklyReport(report: any): string {
    let message = 'üìà <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n';
    message += `üìÖ ${report.startDate} - ${report.endDate}\n\n`;
    
    message += 'üéØ <b>–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:</b>\n';
    message += `üìñ –£—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${report.lessonsCompleted}\n`;
    message += `‚è± –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ${this.formatTimeSpent(report.timeSpent)}\n`;
    message += `üî• –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${report.activeDays}/7\n\n`;

    if (report.achievements.length > 0) {
      message += 'üèÜ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n';
      report.achievements.forEach(achievement => {
        message += `‚Ä¢ ${achievement.title}\n`;
      });
      message += '\n';
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π
    if (report.comparison) {
      message += 'üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π:</b>\n';
      const timeChange = report.comparison.timeSpent;
      const timeIcon = timeChange > 0 ? 'üìà' : timeChange < 0 ? 'üìâ' : '‚û°Ô∏è';
      message += `${timeIcon} –í—Ä–µ–º—è: ${Math.abs(timeChange)} –º–∏–Ω\n`;
      
      const lessonsChange = report.comparison.lessons;
      const lessonsIcon = lessonsChange > 0 ? 'üìà' : lessonsChange < 0 ? 'üìâ' : '‚û°Ô∏è';
      message += `${lessonsIcon} –£—Ä–æ–∫–∏: ${Math.abs(lessonsChange)}\n\n`;
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (report.recommendations.length > 0) {
      message += 'üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n';
      report.recommendations.forEach(rec => {
        message += `‚Ä¢ ${rec}\n`;
      });
    }

    return message;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   */
  private createProgressBar(percentage: number): string {
    const totalBars = 10;
    const filledBars = Math.round((percentage / 100) * totalBars);
    const emptyBars = totalBars - filledBars;
    
    return '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
   */
  private formatTimeSpent(minutes: number): string {
    if (minutes < 60) {
      return `${minutes} –º–∏–Ω`;
    }
    
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    
    if (hours < 24) {
      return remainingMinutes > 0 ? `${hours}—á ${remainingMinutes}–º` : `${hours}—á`;
    }
    
    const days = Math.floor(hours / 24);
    const remainingHours = hours % 24;
    
    return remainingHours > 0 ? `${days}–¥ ${remainingHours}—á` : `${days}–¥`;
  }

  /**
   * –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
   */
  private createProgressOverviewKeyboard(inProgressCourses: any[]): InlineKeyboardButton[][] {
    const keyboard: InlineKeyboardButton[][] = [];

    // –ö—É—Ä—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    inProgressCourses.slice(0, 3).forEach(course => {
      keyboard.push([{
        text: `üìä ${course.title}`,
        callback_data: `progress_${course.id}`,
      }]);
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.push([
      { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'show_achievements' },
      { text: 'üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: 'weekly_report' },
    ]);

    keyboard.push([
      { text: 'üìö –í—Å–µ –∫—É—Ä—Å—ã', callback_data: 'show_all_courses' },
    ]);

    return keyboard;
  }

  private createCourseProgressKeyboard(courseProgress: any): InlineKeyboardButton[][] {
    const keyboard: InlineKeyboardButton[][] = [];

    // –î–µ–π—Å—Ç–≤–∏—è —Å –∫—É—Ä—Å–æ–º
    if (courseProgress.nextLessons && courseProgress.nextLessons.length > 0) {
      keyboard.push([{
        text: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ',
        callback_data: `lesson_${courseProgress.nextLessons[0].id}`,
      }]);
    }

    keyboard.push([
      { text: 'üìñ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞', callback_data: `lessons_${courseProgress.courseId}` },
      { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: `stats_${courseProgress.courseId}` },
    ]);

    if (courseProgress.progressPercentage >= 100 && !courseProgress.certificateIssued) {
      keyboard.push([{
        text: 'üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
        callback_data: `certificate_${courseProgress.courseId}`,
      }]);
    }

    keyboard.push([
      { text: '‚¨ÖÔ∏è –ö –æ–±—â–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É', callback_data: 'show_progress' },
    ]);

    return keyboard;
  }

  private createAchievementsKeyboard(achievements: any): InlineKeyboardButton[][] {
    const keyboard: InlineKeyboardButton[][] = [];

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    keyboard.push([
      { text: 'üìö –ü–æ –∫—É—Ä—Å–∞–º', callback_data: 'achievements_courses' },
      { text: '‚è± –ü–æ –≤—Ä–µ–º–µ–Ω–∏', callback_data: 'achievements_time' },
    ]);

    keyboard.push([
      { text: 'üî• –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', callback_data: 'achievements_streak' },
      { text: 'üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ', callback_data: 'achievements_special' },
    ]);

    keyboard.push([
      { text: 'üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'show_progress' },
    ]);

    return keyboard;
  }

  private createWeeklyReportKeyboard(): InlineKeyboardButton[][] {
    return [
      [
        { text: 'üìà –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á–µ—Ç—ã', callback_data: 'previous_reports' },
        { text: 'üéØ –¶–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'weekly_goals' },
      ],
      [
        { text: 'üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'show_progress' },
      ],
    ];
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (mock –¥–∞–Ω–Ω—ã–µ)
  private async getCourseProgress(userId: string, courseId: string): Promise<any> {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Progress Service
    return {
      courseId,
      courseTitle: 'Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
      progressPercentage: 65,
      completedLessons: 13,
      totalLessons: 20,
      timeSpent: 480, // –º–∏–Ω—É—Ç—ã
      enrolledAt: new Date('2023-11-01'),
      lastAccessedAt: new Date('2023-12-01'),
      certificateIssued: false,
      nextLessons: [
        { id: 'lesson-14', title: '–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏' },
        { id: 'lesson-15', title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π' },
      ],
    };
  }

  private calculateAchievements(userCourses: any): any {
    const completedCount = userCourses.completed.length;
    const totalTime = userCourses.enrolled.reduce((sum, course) => sum + (course.progress?.timeSpent || 0), 0);

    return {
      main: [
        {
          title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
          description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫',
          unlocked: true,
        },
        {
          title: '–°—Ç—É–¥–µ–Ω—Ç',
          description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å',
          unlocked: completedCount >= 1,
        },
        {
          title: '–ó–Ω–∞—Ç–æ–∫',
          description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 5 –∫—É—Ä—Å–æ–≤',
          unlocked: completedCount >= 5,
        },
      ],
      nextAchievement: {
        title: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
        description: '–ò–∑—É—á–∞–π—Ç–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        progress: 45,
      },
      unlockedCount: 2,
      totalCount: 15,
      stats: {
        completedCourses: completedCount,
        totalTime,
      },
    };
  }

  private getRecentAchievements(completedCourses: any[]): any[] {
    if (completedCourses.length === 0) return [];
    
    return [
      { icon: 'üéì', title: '–ó–∞–≤–µ—Ä—à–µ–Ω –∫—É—Ä—Å "Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"' },
    ].slice(0, 2);
  }

  private async generateWeeklyReport(userId: string): Promise<any> {
    // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    return {
      startDate: '25 –Ω–æ—è',
      endDate: '1 –¥–µ–∫',
      lessonsCompleted: 8,
      timeSpent: 240, // –º–∏–Ω—É—Ç—ã
      activeDays: 5,
      achievements: [
        { title: '–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç - 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥' },
      ],
      comparison: {
        timeSpent: 60, // +60 –º–∏–Ω—É—Ç –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ
        lessons: 3, // +3 —É—Ä–æ–∫–∞ –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ
      },
      recommendations: [
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 15 –º–∏–Ω—É—Ç',
        '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é React –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è JavaScript',
      ],
    };
  }

  private estimateCompletionTime(courseProgress: any): string {
    const remaining = courseProgress.totalLessons - courseProgress.completedLessons;
    const avgLessonTime = courseProgress.timeSpent / courseProgress.completedLessons || 30;
    const daysRemaining = Math.ceil((remaining * avgLessonTime) / 60 / 2); // 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å
    
    return `—á–µ—Ä–µ–∑ ${daysRemaining} –¥–Ω–µ–π`;
  }
}
