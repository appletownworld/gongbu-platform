import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Context } from 'telegraf';
import { PrismaClient } from '@prisma/client';
import { BotConfig } from '../config/bot.config';
import { AuthClientService } from '../integrations/auth-client.service';
import { CourseClientService } from '../integrations/course-client.service';
import { CourseCommandsService } from '../commands/course-commands.service';
import { ProgressCommandsService } from '../commands/progress-commands.service';

export interface BotContext extends Context {
  session?: any;
  user?: any;
  state?: string;
}

@Injectable()
export class BotService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(BotService.name);
  private bot: Telegraf<BotContext>;
  private botConfig: BotConfig;

  constructor(
    private readonly configService: ConfigService,
    private readonly prisma: PrismaClient,
    private readonly authClient: AuthClientService,
    private readonly courseClient: CourseClientService,
    private readonly courseCommands: CourseCommandsService,
    private readonly progressCommands: ProgressCommandsService,
  ) {
    this.initializeBot();
  }

  private initializeBot() {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }

    this.bot = new Telegraf<BotContext>(token);
    this.setupBotHandlers();
  }

  private setupBotHandlers() {
    // Global middleware for logging and user management
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      
      try {
        // Log incoming update
        this.logger.debug(`Incoming update: ${ctx.updateType}`, {
          userId: ctx.from?.id,
          chatId: ctx.chat?.id,
          updateType: ctx.updateType,
        });

        // Process user data
        await this.processUser(ctx);
        
        // Continue processing
        await next();
        
        // Log processing time
        const processingTime = Date.now() - start;
        this.logger.debug(`Update processed in ${processingTime}ms`);
        
        // Store analytics
        await this.recordAnalytics(ctx, processingTime, true);
        
      } catch (error) {
        const processingTime = Date.now() - start;
        this.logger.error(`Error processing update: ${error.message}`, error);
        
        // Store error analytics
        await this.recordAnalytics(ctx, processingTime, false, error.message);
        
        // Send error message to user
        try {
          await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } catch (replyError) {
          this.logger.error('Failed to send error message to user:', replyError);
        }
      }
    });

    // Start command
    this.bot.start(async (ctx) => {
      const user = ctx.from;
      
      this.logger.log(`New user started bot: ${user.id} (@${user.username})`);
      
      const welcomeMessage = `
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gongbu!

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∫—É—Ä—Å–æ–≤.

üìö –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–¥–∞–Ω–∏—è—Ö
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /courses —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã –∏–ª–∏ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
      `;

      await ctx.reply(welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìö –ö—É—Ä—Å—ã', callback_data: 'show_courses' },
              { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'show_profile' },
            ],
            [
              { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' },
            ],
          ],
        },
      });
    });

    // Help command
    this.bot.help(async (ctx) => {
      const helpMessage = `
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üè† <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üìö <b>–ö—É—Ä—Å—ã –∏ –æ–±—É—á–µ–Ω–∏–µ:</b>
/courses - –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
/my_courses - –ú–æ–∏ –∫—É—Ä—Å—ã
/progress - –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/reminders - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üí∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>
/subscription - –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞
/upgrade - –£–ª—É—á—à–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É

üõ† <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</b>
/create - –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å (–¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤)
/analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤)

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @gongbu_support
      `;

      await ctx.reply(helpMessage, { parse_mode: 'HTML' });
    });

    // Course commands with real integration
    this.bot.command('courses', async (ctx) => {
      await this.courseCommands.handleCoursesCommand(ctx);
    });

    this.bot.command('my_courses', async (ctx) => {
      await this.courseCommands.handleMyCoursesCommand(ctx);
    });

    this.bot.command('search', async (ctx) => {
      const args = ctx.message.text.split(' ').slice(1);
      const query = args.join(' ');
      await this.courseCommands.handleSearchCommand(ctx, query);
    });

    this.bot.command('profile', async (ctx) => {
      await this.handleProfileCommand(ctx);
    });

    // Progress commands
    this.bot.command('progress', async (ctx) => {
      await this.progressCommands.handleProgressCommand(ctx);
    });

    this.bot.command('achievements', async (ctx) => {
      await this.progressCommands.handleAchievementsCommand(ctx);
    });

    this.bot.command('weekly_report', async (ctx) => {
      await this.progressCommands.handleWeeklyReportCommand(ctx);
    });

    // Handle callback queries
    this.bot.on('callback_query', async (ctx) => {
      const data = ctx.callbackQuery.data;
      
      this.logger.debug(`Callback query: ${data} from user ${ctx.from.id}`);
      
      switch (data) {
        case 'show_courses':
        case 'show_all_courses':
          await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã...');
          await this.courseCommands.handleCoursesCommand(ctx);
          break;
          
        case 'my_courses':
          await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∫—É—Ä—Å—ã...');
          await this.courseCommands.handleMyCoursesCommand(ctx);
          break;
          
        case 'show_profile':
          await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ—Ñ–∏–ª—å...');
          await this.handleProfileCommand(ctx);
          break;
          
        case 'show_help':
          await ctx.answerCbQuery();
          await this.showDetailedHelp(ctx);
          break;

        case 'search_courses':
          await ctx.answerCbQuery();
          await ctx.editMessageText(
            'üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
            '<code>/search –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞</code>\n\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
            '<code>/search python</code>\n' +
            '<code>/search –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</code>',
            { parse_mode: 'HTML' }
          );
          break;
          
        default:
          // Handle course-related callbacks
          if (data.startsWith('course_')) {
            const courseId = data.replace('course_', '');
            await this.courseCommands.showCourseDetails(ctx, courseId);
          } else if (data.startsWith('courses_page_')) {
            const page = parseInt(data.replace('courses_page_', ''));
            await this.handleCoursesPage(ctx, page);
          } else if (data.startsWith('progress_')) {
            const courseId = data.replace('progress_', '');
            await this.progressCommands.showCourseProgress(ctx, courseId);
          } else if (data === 'show_progress') {
            await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å...');
            await this.progressCommands.handleProgressCommand(ctx);
          } else if (data === 'show_achievements') {
            await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...');
            await this.progressCommands.handleAchievementsCommand(ctx);
          } else if (data === 'weekly_report') {
            await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...');
            await this.progressCommands.handleWeeklyReportCommand(ctx);
          } else {
            await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
          }
      }
    });

    // Handle unknown commands
    this.bot.on('message', async (ctx) => {
      if ('text' in ctx.message && ctx.message.text.startsWith('/')) {
        await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
        return;
      }
      
      // Handle regular messages
      await ctx.reply('üí¨ –Ø –≤–∞—Å –ø–æ–Ω—è–ª! –ü–æ–∫–∞ —á—Ç–æ —è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    });

    // Error handler
    this.bot.catch((err, ctx) => {
      this.logger.error(`Bot error for update ${ctx.update.update_id}:`, err);
    });
  }

  private async processUser(ctx: BotContext) {
    if (!ctx.from) return;

    const telegramId = BigInt(ctx.from.id);
    
    try {
      // Find or create bot user
      const existingUser = await this.prisma.botUser.findUnique({
        where: { telegramId },
      });

      if (!existingUser) {
        // Create new bot user
        await this.prisma.botUser.create({
          data: {
            telegramId,
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name,
            languageCode: ctx.from.language_code || 'ru',
            isBot: ctx.from.is_bot || false,
            lastInteraction: new Date(),
            messageCount: 1,
          },
        });
        
        this.logger.log(`Created new bot user: ${telegramId} (@${ctx.from.username})`);
      } else {
        // Update existing user
        await this.prisma.botUser.update({
          where: { telegramId },
          data: {
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name,
            lastInteraction: new Date(),
            messageCount: { increment: 1 },
          },
        });
      }
      
      // Attach user to context
      ctx.user = existingUser || { telegramId, isNew: true };
      
    } catch (error) {
      this.logger.error('Failed to process user:', error);
    }
  }

  private async recordAnalytics(
    ctx: BotContext,
    processingTime: number,
    success: boolean,
    errorMessage?: string,
  ) {
    try {
      // Record bot message
      if (ctx.message) {
        await this.prisma.botMessage.create({
          data: {
            telegramId: BigInt(ctx.from.id),
            messageId: ctx.message.message_id,
            chatId: BigInt(ctx.chat.id),
            chatType: ctx.chat.type,
            messageType: this.getMessageType(ctx.message),
            text: 'text' in ctx.message ? ctx.message.text : null,
            caption: 'caption' in ctx.message ? ctx.message.caption : null,
            direction: 'INCOMING',
            responseTime: processingTime,
            isProcessed: success,
            processingTime,
            errorMessage,
          },
        });
      }
      
      // Record bot command if it's a command
      if ('text' in ctx.message && ctx.message.text?.startsWith('/')) {
        const [command, ...args] = ctx.message.text.slice(1).split(' ');
        
        await this.prisma.botCommand.create({
          data: {
            telegramId: BigInt(ctx.from.id),
            command: `/${command}`,
            arguments: args.length > 0 ? args.join(' ') : null,
            chatId: BigInt(ctx.chat.id),
            chatType: ctx.chat.type,
            isSuccessful: success,
            responseTime: processingTime,
            errorMessage,
            result: success ? { processed: true } : { error: errorMessage },
          },
        });
      }
      
    } catch (error) {
      this.logger.error('Failed to record analytics:', error);
    }
  }

  private getMessageType(message: any): string {
    if (message.text) return 'TEXT';
    if (message.photo) return 'PHOTO';
    if (message.video) return 'VIDEO';
    if (message.audio) return 'AUDIO';
    if (message.document) return 'DOCUMENT';
    if (message.sticker) return 'STICKER';
    if (message.voice) return 'VOICE';
    if (message.video_note) return 'VIDEO_NOTE';
    if (message.location) return 'LOCATION';
    if (message.contact) return 'CONTACT';
    if (message.poll) return 'POLL';
    if (message.dice) return 'DICE';
    return 'UNKNOWN';
  }

  async onModuleInit() {
    const webhookUrl = this.configService.get<string>('TELEGRAM_BOT_WEBHOOK_URL');
    
    if (webhookUrl) {
      // Use webhooks
      const webhookPath = this.configService.get<string>('TELEGRAM_BOT_WEBHOOK_PATH', '/webhook');
      const webhookSecret = this.configService.get<string>('TELEGRAM_BOT_WEBHOOK_SECRET');
      
      try {
        await this.bot.telegram.setWebhook(`${webhookUrl}${webhookPath}`, {
          secret_token: webhookSecret,
        });
        
        this.logger.log(`‚úÖ Bot webhook set to: ${webhookUrl}${webhookPath}`);
      } catch (error) {
        this.logger.error('‚ùå Failed to set webhook:', error);
        throw error;
      }
    } else {
      // Use polling
      this.bot.launch();
      this.logger.log('‚úÖ Bot started with polling');
    }

    // Set bot info
    try {
      const me = await this.bot.telegram.getMe();
      this.logger.log(`ü§ñ Bot info: @${me.username} (${me.first_name})`);
    } catch (error) {
      this.logger.error('Failed to get bot info:', error);
    }
  }

  async onModuleDestroy() {
    if (this.bot) {
      await this.bot.stop();
      this.logger.log('üõë Bot stopped');
    }
  }

  // Webhook handler for HTTP requests
  async handleWebhook(body: any): Promise<void> {
    try {
      await this.bot.handleUpdate(body);
    } catch (error) {
      this.logger.error('Webhook processing error:', error);
      throw error;
    }
  }

  // Get bot instance for other services
  getBot(): Telegraf<BotContext> {
    return this.bot;
  }

  // Send message to user
  async sendMessage(
    chatId: number | string,
    message: string,
    options?: any,
  ): Promise<void> {
    try {
      await this.bot.telegram.sendMessage(chatId, message, options);
    } catch (error) {
      this.logger.error(`Failed to send message to ${chatId}:`, error);
      throw error;
    }
  }

  // Send notification
  async sendNotification(
    userId: string,
    notification: {
      type: string;
      title?: string;
      message: string;
      parseMode?: string;
    },
  ): Promise<void> {
    try {
      // TODO: Implement notification sending logic
      // This would involve looking up the user's telegram ID and sending the message
      this.logger.debug('Sending notification (not implemented):', { userId, notification });
    } catch (error) {
      this.logger.error('Failed to send notification:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleProfileCommand(ctx: BotContext): Promise<void> {
    try {
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const user = await this.authClient.createOrGetUser(ctx.from);
      
      let profileMessage = `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n`;
      profileMessage += `üìù <b>–ò–º—è:</b> ${user.firstName} ${user.lastName || ''}\n`;
      profileMessage += `üÜî <b>Telegram ID:</b> <code>${user.telegramId}</code>\n`;
      
      if (user.username) {
        profileMessage += `üë§ <b>Username:</b> @${user.username}\n`;
      }
      
      profileMessage += `üé≠ <b>–†–æ–ª—å:</b> ${this.translateRole(user.role)}\n`;
      profileMessage += `üìä <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> ${this.translateSubscription(user.subscription)}\n`;
      profileMessage += `‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> ${user.isActive ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}\n`;
      
      if (user.isBanned) {
        profileMessage += `üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> ${user.banReason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
      }
      
      profileMessage += `üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> ${user.createdAt.toLocaleDateString('ru-RU')}\n`;
      
      if (user.lastLogin) {
        profileMessage += `üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> ${user.lastLogin.toLocaleDateString('ru-RU')}\n`;
      }

      const keyboard = [
        [
          { text: 'üìö –ú–æ–∏ –∫—É—Ä—Å—ã', callback_data: 'my_courses' },
          { text: 'üîç –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤', callback_data: 'search_courses' },
        ],
        [
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' },
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' },
        ],
      ];

      await ctx.reply(profileMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error in profile command:', error.message);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏
   */
  async showDetailedHelp(ctx: BotContext): Promise<void> {
    const helpMessage = `
‚ùì <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É Gongbu</b>

üè† <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìö <b>–ö—É—Ä—Å—ã –∏ –æ–±—É—á–µ–Ω–∏–µ:</b>
/courses - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
/my_courses - –í–∞—à–∏ –∫—É—Ä—Å—ã (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º
/progress - –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å–∞–º

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/reminders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏

üí∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞:</b>
/subscription - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
/upgrade - –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

üõ† <b>–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤ –∫—É—Ä—Å–æ–≤:</b>
/create - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
/analytics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –∫—É—Ä—Å–∞–º

üìä <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫—É—Ä—Å–∞, –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Ç–µ–≥–∞–º
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –∑–∞–±—ã—Ç—å –æ–± —É—á–µ–±–µ

‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @gongbu_support
    `;

    await ctx.editMessageText(helpMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìö –ö –∫—É—Ä—Å–∞–º', callback_data: 'show_all_courses' },
            { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'show_profile' },
          ],
        ],
      },
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤
   */
  async handleCoursesPage(ctx: BotContext, page: number): Promise<void> {
    try {
      await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      
      const coursesData = await this.courseClient.getCourses({
        page,
        limit: 5,
      });

      if (!coursesData.courses || coursesData.courses.length === 0) {
        await ctx.editMessageText('üìö –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
      }

      const courseList = this.formatCourseList(coursesData);
      const keyboard = this.createCoursesKeyboard(coursesData.courses, coursesData.pagination);

      await ctx.editMessageText(courseList, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });

    } catch (error) {
      this.logger.error('Error handling courses page:', error.message);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    }
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
   */
  private translateRole(role: string): string {
    const roleTranslations = {
      'ADMIN': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      'INSTRUCTOR': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
      'STUDENT': '–°—Ç—É–¥–µ–Ω—Ç',
    };
    return roleTranslations[role] || role;
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
   */
  private translateSubscription(subscription: string): string {
    const subscriptionTranslations = {
      'FREE': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è',
      'BASIC': '–ë–∞–∑–æ–≤–∞—è',
      'PREMIUM': '–ü—Ä–µ–º–∏—É–º',
      'PRO': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è',
    };
    return subscriptionTranslations[subscription] || subscription;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤ (–∏–∑ CourseCommandsService)
   */
  private formatCourseList(coursesData: any): string {
    const { courses, pagination } = coursesData;
    
    let message = 'üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n';

    courses.forEach((course, index) => {
      const stars = '‚≠ê'.repeat(Math.floor(course.rating));
      const price = course.price > 0 ? `${course.price} ${course.currency}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
      
      message += `<b>${index + 1}. ${course.title}</b>\n`;
      message += `${course.shortDescription || course.description.substring(0, 100)}...\n`;
      message += `${stars} ${course.rating} (${course.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)\n`;
      message += `üí∞ ${price} ‚Ä¢ üë• ${course.studentCount} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n`;
      message += `‚è± ${course.lessonCount} —É—Ä–æ–∫–æ–≤ ‚Ä¢ üìä ${course.difficulty}\n\n`;
    });

    message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.page} –∏–∑ ${pagination.totalPages}\n`;
    message += `üìä –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: ${pagination.totalItems}`;

    return message;
  }

  /**
   * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
   */
  private createCoursesKeyboard(courses: any[], pagination: any): any[][] {
    const keyboard: any[][] = [];

    // –ö–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
    for (let i = 0; i < courses.length; i += 2) {
      const row: any[] = [];
      
      row.push({
        text: `${i + 1}. ${courses[i].title.substring(0, 20)}...`,
        callback_data: `course_${courses[i].id}`,
      });

      if (i + 1 < courses.length) {
        row.push({
          text: `${i + 2}. ${courses[i + 1].title.substring(0, 20)}...`,
          callback_data: `course_${courses[i + 1].id}`,
        });
      }

      keyboard.push(row);
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const navRow: any[] = [];
    if (pagination.hasPrev) {
      navRow.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `courses_page_${pagination.page - 1}` });
    }
    if (pagination.hasNext) {
      navRow.push({ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: `courses_page_${pagination.page + 1}` });
    }
    
    if (navRow.length > 0) {
      keyboard.push(navRow);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.push([
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_courses' },
      { text: 'üìñ –ú–æ–∏ –∫—É—Ä—Å—ã', callback_data: 'my_courses' },
    ]);

    return keyboard;
  }
}
