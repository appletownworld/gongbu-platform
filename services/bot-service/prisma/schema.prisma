// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageType {
  TEXT
  PHOTO
  VIDEO
  DOCUMENT
  AUDIO
  VOICE
  STICKER
  ANIMATION
  LOCATION
  CONTACT
  POLL
  CALLBACK_QUERY
  INLINE_QUERY
}

enum Direction {
  INCOMING
  OUTGOING
}

enum WebhookStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Bot Registry - управление ботами для курсов
model CourseBots {
  id String @id @default(cuid())
  courseId String
  creatorId String
  
  // Bot credentials
  botToken String @unique
  botUsername String @unique
  botId BigInt @unique
  
  // Bot settings
  botName String
  botDescription String?
  botAvatarUrl String?
  welcomeMessage String?
  
  // Configuration
  settings Json @default("{}")
  webhookUrl String?
  webhookSecret String?
  
  // Status
  isActive Boolean @default(true)
  isVerified Boolean @default(false)
  
  // Stats
  totalUsers Int @default(0)
  activeUsers Int @default(0)
  messagesSent Int @default(0)
  
  // Relations
  users BotUsers[]
  messageLogs BotMessageLogs[]
  webhookEvents WebhookEvents[]
  broadcasts Broadcasts[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("course_bots")
}

// Bot Users - пользователи Telegram, взаимодействующие с ботами
model BotUsers {
  id String @id @default(cuid())
  botId String
  bot CourseBots @relation(fields: [botId], references: [id], onDelete: Cascade)
  
  // Telegram user info
  telegramId BigInt
  username String?
  firstName String?
  lastName String?
  languageCode String?
  
  // Platform user reference (if registered)
  platformUserId String?
  
  // Bot interaction state
  currentStepId String?
  botState Json @default("{}")
  
  // Settings
  notificationsEnabled Boolean @default(true)
  preferredLanguage String @default("ru")
  
  // Stats
  messagesCount Int @default(0)
  lastInteractionAt DateTime @default(now())
  
  // Relations
  messageLogs BotMessageLogs[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([botId, telegramId])
  @@map("bot_users")
}

// Bot Messages Log - логи всех сообщений
model BotMessageLogs {
  id String @id @default(cuid())
  botId String
  bot CourseBots @relation(fields: [botId], references: [id], onDelete: Cascade)
  
  telegramUserId BigInt
  botUser BotUsers? @relation(fields: [botId, telegramUserId], references: [botId, telegramId])
  
  // Message info
  messageType MessageType
  direction Direction
  
  // Content
  content Json
  telegramMessageId Int?
  
  // Context
  stepId String?
  actionType String? // 'step_navigation', 'quiz_answer', 'assignment_submit', etc.
  
  // Processing
  processingTimeMs Int?
  errorMessage String?
  
  createdAt DateTime @default(now())
  
  @@map("bot_message_logs")
}

// Webhook Events - события от Telegram
model WebhookEvents {
  id String @id @default(cuid())
  botId String?
  bot CourseBots? @relation(fields: [botId], references: [id])
  
  // Event info
  eventType String
  telegramUpdateId BigInt?
  
  // Payload
  rawPayload Json
  processedPayload Json?
  
  // Processing status
  status WebhookStatus @default(PENDING)
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  errorMessage String?
  retryCount Int @default(0)
  
  createdAt DateTime @default(now())
  
  @@map("webhook_events")
}

// Broadcasts - массовые рассылки
model Broadcasts {
  id String @id @default(cuid())
  botId String
  bot CourseBots @relation(fields: [botId], references: [id], onDelete: Cascade)
  
  // Message content
  messageContent Json
  
  // Targeting
  targetAll Boolean @default(false)
  targetUserIds String[] @default([])
  targetStepId String?
  targetCompletedCourse Boolean @default(false)
  targetInactiveDays Int?
  
  // Scheduling
  scheduledAt DateTime?
  timezone String @default("UTC")
  
  // Status
  status String @default("pending") // pending, sending, completed, failed
  sentCount Int @default(0)
  failedCount Int @default(0)
  totalCount Int @default(0)
  
  // Processing
  startedAt DateTime?
  completedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("broadcasts")
}