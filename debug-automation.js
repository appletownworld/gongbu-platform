#!/usr/bin/env node

/**
 * üîç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ Gongbu Mini App
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Puppeteer –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');

class GongbuDebugger {
  constructor() {
    this.browser = null;
    this.page = null;
    this.baseUrl = 'http://localhost:3000';
  }

  async init() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏...');
    
    this.browser = await puppeteer.launch({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
      devtools: true,  // –û—Ç–∫—Ä—ã—Ç—å DevTools
      args: [
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });
    
    this.page = await this.browser.newPage();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
    await this.page.setViewport({ width: 1920, height: 1080 });
    
    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
    this.page.on('console', msg => {
      console.log('üì± [BROWSER]:', msg.text());
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
    this.page.on('pageerror', err => {
      console.error('‚ùå [PAGE ERROR]:', err.message);
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç network –∑–∞–ø—Ä–æ—Å–æ–≤
    this.page.on('response', response => {
      if (response.status() >= 400) {
        console.error(`üåê [NETWORK ERROR]: ${response.status()} ${response.url()}`);
      }
    });
  }

  async navigateToApp() {
    console.log(`üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ ${this.baseUrl}`);
    
    try {
      await this.page.goto(this.baseUrl, { 
        waitUntil: 'networkidle2',
        timeout: 10000 
      });
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await this.page.waitForSelector('#root', { timeout: 5000 });
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
      return false;
    }
  }

  async analyzePageStructure() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    const pageInfo = await this.page.evaluate(() => {
      return {
        title: document.title,
        url: window.location.href,
        bodyClasses: document.body.className,
        scripts: Array.from(document.scripts).length,
        stylesheets: Array.from(document.styleSheets).length,
        elements: {
          totalElements: document.querySelectorAll('*').length,
          buttons: document.querySelectorAll('button').length,
          links: document.querySelectorAll('a').length,
          forms: document.querySelectorAll('form').length,
          images: document.querySelectorAll('img').length
        },
        reactRoot: !!document.querySelector('#root'),
        viteHMR: !!window.__vite_plugin_react_preamble_installed__
      };
    });
    
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', JSON.stringify(pageInfo, null, 2));
    return pageInfo;
  }

  async checkConsoleErrors() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏...');
    
    const logs = await this.page.evaluate(() => {
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ React
      const originalError = console.error;
      const errors = [];
      
      console.error = function(...args) {
        errors.push(args.join(' '));
        originalError.apply(console, args);
      };
      
      return new Promise(resolve => {
        setTimeout(() => resolve(errors), 1000);
      });
    });
    
    if (logs.length > 0) {
      console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å–æ–ª–∏:');
      logs.forEach(error => console.log('  -', error));
    } else {
      console.log('‚úÖ –û—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    return logs;
  }

  async testInteractivity() {
    console.log('üñ±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    
    try {
      // –ò—â–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const interactive = await this.page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button')).map(btn => ({
          type: 'button',
          text: btn.textContent.trim(),
          enabled: !btn.disabled
        }));
        
        const links = Array.from(document.querySelectorAll('a')).map(link => ({
          type: 'link',
          text: link.textContent.trim(),
          href: link.href
        }));
        
        return { buttons, links };
      });
      
      console.log('üîò –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫:', interactive.buttons.length);
      interactive.buttons.forEach(btn => 
        console.log(`  - "${btn.text}" (${btn.enabled ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'})`));
      
      console.log('üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫:', interactive.links.length);
      interactive.links.slice(0, 5).forEach(link => 
        console.log(`  - "${link.text}" ‚Üí ${link.href}`));
      
      return interactive;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error.message);
      return null;
    }
  }

  async takeScreenshot() {
    const screenshotPath = path.join(__dirname, 'debug-screenshots', 
      `gongbu-debug-${new Date().toISOString().replace(/[:.]/g, '-')}.png`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.mkdir(path.dirname(screenshotPath), { recursive: true });
    
    await this.page.screenshot({ 
      path: screenshotPath,
      fullPage: true 
    });
    
    console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${screenshotPath}`);
    return screenshotPath;
  }

  async runFullDiagnostic() {
    console.log('\nüöÄ =========== –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê GONGBU ===========\n');
    
    const results = {
      timestamp: new Date().toISOString(),
      success: false,
      pageInfo: null,
      errors: [],
      interactive: null,
      screenshot: null
    };
    
    try {
      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
      await this.init();
      
      // 2. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
      const loaded = await this.navigateToApp();
      if (!loaded) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      }
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      results.pageInfo = await this.analyzePageStructure();
      
      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
      results.errors = await this.checkConsoleErrors();
      
      // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      results.interactive = await this.testInteractivity();
      
      // 6. –°–∫—Ä–∏–Ω—à–æ—Ç
      results.screenshot = await this.takeScreenshot();
      
      results.success = true;
      
      console.log('\n‚úÖ =============== –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===============\n');
      
    } catch (error) {
      console.error('\n‚ùå =============== –û–®–ò–ë–ö–ê –û–¢–õ–ê–î–ö–ò ===============\n');
      console.error('–û—à–∏–±–∫–∞:', error.message);
      results.errors.push(error.message);
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const reportPath = path.join(__dirname, 'debug-reports', 
      `debug-report-${new Date().toISOString().replace(/[:.]/g, '-')}.json`);
    
    await fs.mkdir(path.dirname(reportPath), { recursive: true });
    await fs.writeFile(reportPath, JSON.stringify(results, null, 2));
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    
    return results;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      console.log('üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const autoDebugger = new GongbuDebugger();
  
  autoDebugger.runFullDiagnostic()
    .then(results => {
      console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
      console.log(`‚úÖ –£—Å–ø–µ—Ö: ${results.success}`);
      console.log(`üì± –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${results.pageInfo?.elements.totalElements || 'N/A'}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${results.errors.length}`);
      console.log(`üîò –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${
        (results.interactive?.buttons.length || 0) + (results.interactive?.links.length || 0)
      }`);
    })
    .catch(console.error)
    .finally(() => {
      setTimeout(() => {
        autoDebugger.close();
        process.exit(0);
      }, 5000); // –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    });
}

module.exports = GongbuDebugger;
