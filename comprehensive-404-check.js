const axios = require('axios');
const fs = require('fs');
const path = require('path');

/**
 * üîç –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–©–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê 404 –û–®–ò–ë–ö–ò
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ 404 –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã.
 */

const BASE_URL = 'http://localhost:3000';

// –í—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ Footer.tsx
const footerLinks = {
  platform: [
    { name: '–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', href: '/about' },
    { name: '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', href: '/how-it-works' },
    { name: '–¶–µ–Ω—ã', href: '/pricing' },
    { name: 'FAQ', href: '/faq' },
  ],
  learning: [
    { name: '–í—Å–µ –∫—É—Ä—Å—ã', href: '/courses' },
    { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', href: '/categories' },
    { name: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', href: '/instructors' },
    { name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', href: '/certificates' },
  ],
  support: [
    { name: '–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏', href: '/help' },
    { name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', href: '/contact' },
    { name: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', href: '/report' },
    { name: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', href: '/status' },
  ],
  legal: [
    { name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', href: '/privacy' },
    { name: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', href: '/terms' },
    { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', href: '/agreement' },
    { name: 'Cookies', href: '/cookies' },
  ],
};

// –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ App.tsx (–∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∫–æ–¥–∞)
const appRoutes = [
  // Public routes
  { name: '–ì–ª–∞–≤–Ω–∞—è', href: '/' },
  { name: '–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', href: '/about' },
  { name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', href: '/contact' },
  { name: '–ö—É—Ä—Å—ã', href: '/courses' },
  { name: '–î–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞', href: '/courses/test-course' }, // –¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å
  { name: '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', href: '/how-it-works' },
  { name: '–¶–µ–Ω—ã', href: '/pricing' },
  { name: 'FAQ', href: '/faq' },
  { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', href: '/categories' },
  { name: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', href: '/instructors' },
  { name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', href: '/certificates' },
  { name: '–ü–æ–º–æ—â—å', href: '/help' },
  { name: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', href: '/report' },
  { name: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', href: '/status' },
  { name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', href: '/privacy' },
  { name: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', href: '/terms' },
  { name: 'Cookies', href: '/cookies' },
  
  // Auth routes
  { name: '–í—Ö–æ–¥', href: '/auth/login' },
  { name: '–í—Ö–æ–¥ (—Å—Ç–∞—Ä–∞—è)', href: '/login' },
  { name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', href: '/auth/register' },
  { name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Å—Ç–∞—Ä–∞—è)', href: '/register' },
  { name: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', href: '/access-denied' },
  
  // Protected routes (–º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
  { name: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', href: '/dashboard' },
  { name: '–ü—Ä–æ—Ñ–∏–ª—å', href: '/profile' },
  { name: '–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å', href: '/create-course' },
  { name: '–ú–æ–∏ –∫—É—Ä—Å—ã', href: '/my-courses' },
  { name: '–†–µ–¥–∞–∫—Ç–æ—Ä –∫—É—Ä—Å–∞', href: '/courses/test-course/edit' },
  { name: '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', href: '/student/test-course' },
  
  // 404 test
  { name: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', href: '/nonexistent-page' },
];

// API endpoints
const apiEndpoints = [
  { name: 'Auth Health', href: '/api/v1/health', base: 'http://localhost:3001' },
  { name: 'Course Health', href: '/api/v1/health', base: 'http://localhost:3002' },
  { name: 'Courses List', href: '/api/v1/courses', base: 'http://localhost:3002' },
  { name: 'Auth Me', href: '/api/v1/auth/me', base: 'http://localhost:3001' },
  { name: 'Non-existent Course', href: '/api/v1/courses/nonexistent', base: 'http://localhost:3002' },
];

async function checkLink(link, baseUrl = BASE_URL) {
  try {
    const response = await axios.get(`${baseUrl}${link.href}`, {
      timeout: 5000,
      validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    });
    
    return {
      name: link.name,
      href: link.href,
      status: response.status,
      success: response.status === 200,
      time: response.headers['x-response-time'] || 'N/A',
      isApi: baseUrl !== BASE_URL
    };
  } catch (error) {
    return {
      name: link.name,
      href: link.href,
      status: 'ERROR',
      success: false,
      error: error.message,
      isApi: baseUrl !== BASE_URL
    };
  }
}

async function runComprehensive404Check() {
  console.log('üîç ========== –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–©–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê 404 –û–®–ò–ë–ö–ò ==========\n');
  
  const results = {
    footer: [],
    appRoutes: [],
    api: []
  };
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Ñ—É—Ç–µ—Ä–∞
  console.log('ü¶∂ ========== –ü–†–û–í–ï–†–ö–ê –°–°–´–õ–û–ö –§–£–¢–ï–†–ê ==========');
  for (const [category, links] of Object.entries(footerLinks)) {
    console.log(`\nüìÇ ${category.toUpperCase()}:`);
    
    for (const link of links) {
      const result = await checkLink(link);
      results.footer.push(result);
      
      const status = result.success ? '‚úÖ' : '‚ùå';
      const statusText = result.success ? 'OK' : `ERROR (${result.status})`;
      
      console.log(`   ${status} ${link.name} - ${statusText} (${result.href})`);
      
      if (!result.success && result.error) {
        console.log(`      üí• –û—à–∏–±–∫–∞: ${result.error}`);
      }
    }
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  console.log('\n\n‚öõÔ∏è ========== –ü–†–û–í–ï–†–ö–ê –ú–ê–†–®–†–£–¢–û–í –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========');
  for (const link of appRoutes) {
    const result = await checkLink(link);
    results.appRoutes.push(result);
    
    const status = result.success ? '‚úÖ' : '‚ùå';
    const statusText = result.success ? 'OK' : `ERROR (${result.status})`;
    
    console.log(`   ${status} ${link.name} - ${statusText} (${result.href})`);
    
    if (!result.success && result.error) {
      console.log(`      üí• –û—à–∏–±–∫–∞: ${result.error}`);
    }
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
  console.log('\n\nüåê ========== –ü–†–û–í–ï–†–ö–ê API ENDPOINTS ==========');
  for (const endpoint of apiEndpoints) {
    const result = await checkLink(endpoint, endpoint.base);
    results.api.push(result);
    
    const status = result.success ? '‚úÖ' : '‚ùå';
    const statusText = result.success ? 'OK' : `ERROR (${result.status})`;
    
    console.log(`   ${status} ${endpoint.name} - ${statusText} (${endpoint.base}${endpoint.href})`);
    
    if (!result.success && result.error) {
      console.log(`      üí• –û—à–∏–±–∫–∞: ${result.error}`);
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const allResults = [...results.footer, ...results.appRoutes, ...results.api];
  const totalSuccess = allResults.filter(r => r.success).length;
  const totalLinks = allResults.length;
  const successRate = Math.round(totalSuccess / totalLinks * 100);
  
  console.log('\n\nüéØ ========== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ==========');
  console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalSuccess}/${totalLinks} —Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç (${successRate}%)`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const footerSuccess = results.footer.filter(r => r.success).length;
  const appRoutesSuccess = results.appRoutes.filter(r => r.success).length;
  const apiSuccess = results.api.filter(r => r.success).length;
  
  console.log(`\nüìä ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ==========`);
  console.log(`   ü¶∂ –§–£–¢–ï–†: ${footerSuccess}/${results.footer.length} (${Math.round(footerSuccess/results.footer.length*100)}%)`);
  console.log(`   ‚öõÔ∏è –ú–ê–†–®–†–£–¢–´: ${appRoutesSuccess}/${results.appRoutes.length} (${Math.round(appRoutesSuccess/results.appRoutes.length*100)}%)`);
  console.log(`   üåê API: ${apiSuccess}/${results.api.length} (${Math.round(apiSuccess/results.api.length*100)}%)`);
  
  // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  const brokenLinks = allResults.filter(r => !r.success);
  if (brokenLinks.length > 0) {
    console.log('\n‚ùå ========== –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ==========');
    brokenLinks.forEach(link => {
      const category = link.isApi ? 'API' : 'WEB';
      console.log(`   ‚ùå [${category}] ${link.name} (${link.href}) - ${link.status}`);
      if (link.error) {
        console.log(`      üí• ${link.error}`);
      }
    });
    
    console.log(`\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û ${brokenLinks.length} –ü–†–û–ë–õ–ï–ú–ù–´–• –°–°–´–õ–û–ö!`);
    console.log('üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!');
  } else {
    console.log('\nüéâ –í–°–ï –°–°–´–õ–ö–ò –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!');
    console.log('üèÜ –ù–ò–ö–ê–ö–ò–• 404 –û–®–ò–ë–û–ö –ù–ï –ù–ê–ô–î–ï–ù–û!');
  }
  
  console.log('\nüèÅ ========== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ==========');
  console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  const report = {
    timestamp: new Date().toISOString(),
    baseUrl: BASE_URL,
    summary: {
      total: totalLinks,
      success: totalSuccess,
      failed: brokenLinks.length,
      successRate: successRate
    },
    categories: {
      footer: { total: results.footer.length, success: footerSuccess },
      appRoutes: { total: results.appRoutes.length, success: appRoutesSuccess },
      api: { total: results.api.length, success: apiSuccess }
    },
    results: allResults,
    brokenLinks: brokenLinks
  };
  
  const reportPath = `comprehensive-404-report-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  
  return report;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
runComprehensive404Check().catch(console.error);
