#!/usr/bin/env node

/**
 * üîç –£–º–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Gongbu
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ Chrome
 */

const axios = require('axios');
const { JSDOM } = require('jsdom');
const fs = require('fs');
const path = require('path');

class SmartBrowserTester {
  constructor(baseUrl = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
    this.session = axios.create({
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });
    this.testResults = {
      timestamp: new Date().toISOString(),
      baseUrl,
      tests: [],
      summary: {
        total: 0,
        passed: 0,
        failed: 0,
        warnings: 0
      }
    };
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  async testPage(path, expectedElements = {}) {
    console.log(`\nüåê –¢–µ—Å—Ç–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${this.baseUrl}${path}`);
    
    const test = {
      path,
      url: `${this.baseUrl}${path}`,
      status: 'unknown',
      httpStatus: null,
      title: null,
      isNotFound: false,
      reactComponents: false,
      interactiveElements: {
        links: 0,
        buttons: 0,
        forms: 0,
        inputs: 0
      },
      contentChecks: {
        hasMainContent: false,
        hasNavigation: false,
        hasFooter: false,
        contentWords: 0
      },
      performance: {
        loadTime: 0,
        htmlSize: 0
      },
      issues: [],
      warnings: []
    };

    const startTime = Date.now();
    
    try {
      // –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
      const response = await this.session.get(`${this.baseUrl}${path}`);
      test.httpStatus = response.status;
      test.performance.loadTime = Date.now() - startTime;
      test.performance.htmlSize = Buffer.byteLength(response.data, 'utf8');

      // –ü–∞—Ä—Å–∏–º HTML
      const dom = new JSDOM(response.data, { 
        url: `${this.baseUrl}${path}`,
        resources: 'usable',
        runScripts: 'outside-only'
      });
      const document = dom.window.document;

      // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      test.title = document.title;
      console.log(`  üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${test.title}"`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 404 (NotFoundPage)
      const bodyText = document.body.textContent.toLowerCase();
      test.isNotFound = bodyText.includes('404') || 
                      bodyText.includes('not found') || 
                      bodyText.includes('—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞') ||
                      bodyText.includes('—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

      if (test.isNotFound) {
        test.status = 'failed';
        test.issues.push('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è 404 NotFoundPage –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        console.log(`  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 404!`);
      } else {
        console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å: ${test.httpStatus} (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)`);
      }

      // React –ø—Ä–æ–≤–µ—Ä–∫–∏
      test.reactComponents = !!document.getElementById('root');
      const scripts = Array.from(document.querySelectorAll('script'));
      const hasViteHMR = scripts.some(s => s.src && s.src.includes('@vite/client'));
      
      if (!test.reactComponents) {
        test.warnings.push('React root —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      test.interactiveElements.links = document.querySelectorAll('a[href]').length;
      test.interactiveElements.buttons = document.querySelectorAll('button').length;
      test.interactiveElements.forms = document.querySelectorAll('form').length;
      test.interactiveElements.inputs = document.querySelectorAll('input, textarea, select').length;

      console.log(`  üîó –°—Å—ã–ª–æ–∫: ${test.interactiveElements.links}`);
      console.log(`  üîò –ö–Ω–æ–ø–æ–∫: ${test.interactiveElements.buttons}`);
      console.log(`  üìù –§–æ—Ä–º: ${test.interactiveElements.forms}`);

      // –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const textContent = document.body.textContent || '';
      test.contentChecks.contentWords = textContent.trim().split(/\s+/).length;
      test.contentChecks.hasMainContent = textContent.length > 200; // –ú–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤
      test.contentChecks.hasNavigation = document.querySelector('nav') !== null;
      test.contentChecks.hasFooter = document.querySelector('footer') !== null;

      console.log(`  üìù –°–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${test.contentChecks.contentWords}`);
      console.log(`  üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${test.contentChecks.hasNavigation ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ü¶∂ –§—É—Ç–µ—Ä: ${test.contentChecks.hasFooter ? '‚úÖ' : '‚ùå'}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      this.checkSpecificContent(test, path, textContent);

      // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      if (!test.isNotFound && test.contentChecks.hasMainContent) {
        test.status = 'passed';
        console.log(`  üéâ –£–°–ü–ï–•: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      } else if (!test.isNotFound) {
        test.status = 'warning';
        test.warnings.push('–ú–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        console.log(`  ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –Ω–æ –º–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞`);
      }

      // Performance warnings
      if (test.performance.loadTime > 2000) {
        test.warnings.push(`–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${test.performance.loadTime}ms`);
      }
      
      if (test.performance.htmlSize > 50000) {
        test.warnings.push(`–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä HTML: ${Math.round(test.performance.htmlSize/1024)}KB`);
      }

    } catch (error) {
      test.status = 'failed';
      test.issues.push(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
      console.log(`  ‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.testResults.tests.push(test);
    this.testResults.summary.total++;
    
    if (test.status === 'passed') this.testResults.summary.passed++;
    else if (test.status === 'failed') this.testResults.summary.failed++;
    else if (test.status === 'warning') this.testResults.summary.warnings++;

    return test;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  checkSpecificContent(test, path, textContent) {
    const contentLower = textContent.toLowerCase();
    
    const expectations = {
      '/about': ['–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', 'gongbu', '–∫–æ—Ä–µ–π—Å–∫', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω'],
      '/courses': ['–∫—É—Ä—Å', '–∏–∑—É—á–µ–Ω', '–∫–æ—Ä–µ–π—Å–∫'],
      '/contact': ['–∫–æ–Ω—Ç–∞–∫—Ç', '—Å–≤—è–∑—å', '–ø–æ–¥–¥–µ—Ä–∂–∫'],
      '/instructors': ['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª', '—É—á–∏—Ç–µ–ª', '—ç–∫—Å–ø–µ—Ä—Ç'],
      '/certificates': ['—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'],
      '/help': ['–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫', '–≤–æ–ø—Ä–æ—Å'],
      '/faq': ['–≤–æ–ø—Ä–æ—Å', '–æ—Ç–≤–µ—Ç', 'faq'],
      '/pricing': ['—Ü–µ–Ω', '—Å—Ç–æ–∏–º–æ—Å—Ç', '—Ç–∞—Ä–∏—Ñ'],
      '/privacy': ['–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç', '–¥–∞–Ω–Ω—ã—Ö', '–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç'],
      '/terms': ['—É—Å–ª–æ–≤–∏—è', '–ø—Ä–∞–≤–∏–ª–∞', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ'],
      '/report': ['–ø—Ä–æ–±–ª–µ–º', '–æ—Ç—á–µ—Ç', '–æ—à–∏–±–∫'],
      '/status': ['—Å—Ç–∞—Ç—É—Å', '—Å–µ—Ä–≤–∏—Å', '—Ä–∞–±–æ—Ç']
    };

    const expectedWords = expectations[path];
    if (expectedWords) {
      const foundWords = expectedWords.filter(word => contentLower.includes(word));
      const expectedCount = expectedWords.length;
      const foundCount = foundWords.length;
      
      console.log(`  üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${foundCount}/${expectedCount} –Ω–∞–π–¥–µ–Ω–æ`);
      
      if (foundCount === 0) {
        test.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è ${path}`);
      } else if (foundCount < expectedCount / 2) {
        test.warnings.push(`–ú–∞–ª–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è ${path}`);
      }
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async testAllPages() {
    console.log('üöÄ ========== –£–ú–ù–û–ï –ë–†–ê–£–ó–ï–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ==========\n');
    
    const pagesToTest = [
      // –ì–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      { path: '/', name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
      
      // –ì—Ä—É–ø–ø–∞ "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞" 
      { path: '/about', name: '–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ' },
      { path: '/how-it-works', name: '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç' },
      { path: '/pricing', name: '–¶–µ–Ω—ã' },
      { path: '/faq', name: 'FAQ' },
      
      // –ì—Ä—É–ø–ø–∞ "–û–±—É—á–µ–Ω–∏–µ"
      { path: '/courses', name: '–í—Å–µ –∫—É—Ä—Å—ã' },
      { path: '/categories', name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' },
      { path: '/instructors', name: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏' },
      { path: '/certificates', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã' },
      
      // –ì—Ä—É–ø–ø–∞ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
      { path: '/help', name: '–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏' },
      { path: '/contact', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' },
      { path: '/report', name: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ' },
      { path: '/status', name: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã' },
      
      // –ì—Ä—É–ø–ø–∞ "–ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
      { path: '/privacy', name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏' },
      { path: '/terms', name: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' },
      
      // Auth —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      { path: '/login', name: '–í—Ö–æ–¥' },
      { path: '/register', name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' }
    ];

    for (const page of pagesToTest) {
      await this.testPage(page.path);
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    this.generateReport();
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  generateReport() {
    const { summary, tests } = this.testResults;
    const successRate = summary.total > 0 ? (summary.passed / summary.total * 100).toFixed(1) : 0;
    
    console.log('\nüìä ========== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ==========');
    console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${summary.passed}/${summary.total} (${successRate}%)`);
    console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${summary.failed}/${summary.total}`);
    console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${summary.warnings}/${summary.total}`);

    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const failedTests = tests.filter(t => t.status === 'failed');
    if (failedTests.length > 0) {
      console.log(`\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–¢–†–ê–ù–ò–¶–´:`);
      failedTests.forEach(test => {
        console.log(`   ${test.path}: ${test.issues.join(', ')}`);
      });
    }

    // –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    const warningTests = tests.filter(t => t.status === 'warning');
    if (warningTests.length > 0) {
      console.log(`\n‚ö†Ô∏è –°–¢–†–ê–ù–ò–¶–´ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò:`);
      warningTests.forEach(test => {
        console.log(`   ${test.path}: ${test.warnings.join(', ')}`);
      });
    }

    // –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const passedTests = tests.filter(t => t.status === 'passed');
    if (passedTests.length > 0) {
      console.log(`\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –°–¢–†–ê–ù–ò–¶–´:`);
      passedTests.forEach(test => {
        const interactiveCount = test.interactiveElements.links + test.interactiveElements.buttons;
        console.log(`   ${test.path}: ${test.contentChecks.contentWords} —Å–ª–æ–≤, ${interactiveCount} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      });
    }

    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const avgLoadTime = tests.reduce((sum, t) => sum + t.performance.loadTime, 0) / tests.length;
    console.log(`\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:`);
    console.log(`   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${Math.round(avgLoadTime)}ms`);
    
    const slowPages = tests.filter(t => t.performance.loadTime > 1000);
    if (slowPages.length > 0) {
      console.log(`   üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${slowPages.map(t => `${t.path} (${t.performance.loadTime}ms)`).join(', ')}`);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const reportPath = path.join(__dirname, 'test-reports', `browser-test-${new Date().toISOString().replace(/:/g, '-')}.json`);
    if (!fs.existsSync(path.dirname(reportPath))) {
      fs.mkdirSync(path.dirname(reportPath), { recursive: true });
    }
    fs.writeFileSync(reportPath, JSON.stringify(this.testResults, null, 2));
    console.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if (summary.failed === 0 && summary.passed > summary.total * 0.8) {
      console.log('\nüéâ –û–¢–õ–ò–ß–ù–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (summary.failed <= 2) {
      console.log('\nüëç –•–û–†–û–®–û! –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º, –Ω–æ –≤ —Ü–µ–ª–æ–º —Å–∞–π—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω');  
    } else {
      console.log('\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü');
    }

    return this.testResults;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const tester = new SmartBrowserTester();
  tester.testAllPages().catch(console.error);
}

module.exports = SmartBrowserTester;
