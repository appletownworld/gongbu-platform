#!/usr/bin/env node

const axios = require('axios');
const { JSDOM } = require('jsdom');
const fs = require('fs');
const path = require('path');

class GongbuSiteChecker {
  constructor(baseUrl = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
    this.authApiUrl = 'http://localhost:3001/api/v1';
    this.courseApiUrl = 'http://localhost:3002/api/v1';
    this.reportDir = path.join(__dirname, 'site-check-reports');
    if (!fs.existsSync(this.reportDir)) {
      fs.mkdirSync(this.reportDir);
    }
  }

  async checkPage(url, expectedTitle = null) {
    try {
      console.log(`\nüìç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);
      const response = await axios.get(url, { timeout: 10000 });
      
      if (response.status === 200) {
        const dom = new JSDOM(response.data);
        const document = dom.window.document;
        const title = document.title;
        
        console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`  üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${title}"`);
        
        if (expectedTitle && title.includes(expectedTitle)) {
          console.log(`  üéØ –û–∂–∏–¥–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω!`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const reactRoot = document.getElementById('root');
        const viteClient = response.data.includes('/@vite/client');
        
        console.log(`  ‚öõÔ∏è React Root: ${reactRoot ? '‚úÖ' : '‚ùå'}`);
        console.log(`  üî• Vite HMR: ${viteClient ? '‚úÖ' : '‚ùå'}`);
        
        return { success: true, status: response.status, title, data: response.data };
      } else {
        console.log(`  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        return { success: false, status: response.status, error: `HTTP ${response.status}` };
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async checkApi(url, expectedStatus = 200, description = '') {
    try {
      console.log(`\nüåê –ü—Ä–æ–≤–µ—Ä—è—é API: ${url} ${description}`);
      const response = await axios.get(url, { 
        timeout: 5000,
        validateStatus: () => true // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ non-2xx —Å—Ç–∞—Ç—É—Å—ã
      });
      
      const isSuccess = response.status === expectedStatus;
      console.log(`  ${isSuccess ? '‚úÖ' : '‚ùå'} –°—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${expectedStatus})`);
      
      if (response.data && typeof response.data === 'object') {
        console.log(`  üìä –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data).substring(0, 100)}...`);
      }
      
      return { success: isSuccess, status: response.status, data: response.data };
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async runFullCheck() {
    console.log('üöÄ ========== –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ê–ô–¢–ê GONGBU ==========');
    
    const report = {
      timestamp: new Date().toISOString(),
      baseUrl: this.baseUrl,
      pages: {},
      apis: {},
      summary: { total: 0, success: 0, failed: 0 }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    const pagesToCheck = [
      { url: `${this.baseUrl}/`, title: 'Gongbu', name: 'home' },
      { url: `${this.baseUrl}/about`, title: '–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', name: 'about' },
      { url: `${this.baseUrl}/contact`, title: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏', name: 'contact' },
      { url: `${this.baseUrl}/courses`, title: '–ö—É—Ä—Å—ã', name: 'courses' },
      { url: `${this.baseUrl}/dashboard`, title: 'Dashboard', name: 'dashboard' },
      { url: `${this.baseUrl}/profile`, title: 'Profile', name: 'profile' },
      { url: `${this.baseUrl}/nonexistent`, title: null, name: '404_test' } // –ü—Ä–æ–≤–µ—Ä–∫–∞ 404
    ];

    console.log('\nüî∏ ========== –ü–†–û–í–ï–†–ö–ê –°–¢–†–ê–ù–ò–¶ ==========');
    for (const page of pagesToCheck) {
      const result = await this.checkPage(page.url, page.title);
      report.pages[page.name] = result;
      report.summary.total++;
      if (result.success) {
        report.summary.success++;
      } else {
        report.summary.failed++;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    const apisToCheck = [
      { url: `${this.authApiUrl}/health`, status: 200, desc: '(Auth Service Health)' },
      { url: `${this.courseApiUrl}/health`, status: 200, desc: '(Course Service Health)' },
      { url: `${this.courseApiUrl}/courses`, status: 200, desc: '(Courses List)' },
      { url: `${this.authApiUrl}/auth/me`, status: 401, desc: '(Auth Check - 401 expected)' },
      { url: `${this.courseApiUrl}/courses/nonexistent`, status: 404, desc: '(Non-existent course - 404 expected)' }
    ];

    console.log('\nüî∏ ========== –ü–†–û–í–ï–†–ö–ê API ==========');
    for (const api of apisToCheck) {
      const result = await this.checkApi(api.url, api.status, api.desc);
      report.apis[api.url] = result;
      report.summary.total++;
      if (result.success) {
        report.summary.success++;
      } else {
        report.summary.failed++;
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüî∏ ========== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò ==========');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç React
    if (report.pages.home && report.pages.home.data) {
      const hasReact = report.pages.home.data.includes('react');
      const hasVite = report.pages.home.data.includes('@vite/client');
      console.log(`üì¶ React —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è: ${hasReact ? '‚úÖ' : '‚ùå'}`);
      console.log(`‚ö° Vite –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${hasVite ? '‚úÖ' : '‚ùå'}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
    console.log('\n‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞:');
    const start = Date.now();
    await this.checkPage(this.baseUrl);
    const responseTime = Date.now() - start;
    console.log(`  üöÄ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${responseTime}ms`);
    report.responseTime = responseTime;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const filename = `site-check-${new Date().toISOString().replace(/:/g, '-')}.json`;
    const filepath = path.join(this.reportDir, filename);
    fs.writeFileSync(filepath, JSON.stringify(report, null, 2));

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä ========== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ==========');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${report.summary.success}/${report.summary.total}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${report.summary.failed}/${report.summary.total}`);
    console.log(`‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${responseTime}ms`);
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);

    const successRate = (report.summary.success / report.summary.total * 100).toFixed(1);
    console.log(`üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);

    if (report.summary.failed === 0) {
      console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    } else {
      console.log(`\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ ${report.summary.failed} –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö`);
    }

    return report;
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const checker = new GongbuSiteChecker();
  checker.runFullCheck()
    .then(report => {
      console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(report.summary.failed === 0 ? 0 : 1);
    })
    .catch(error => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = GongbuSiteChecker;
