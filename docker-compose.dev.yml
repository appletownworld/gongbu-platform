version: '3.8'

services:
  # Базы данных и кеширование
  postgres:
    image: postgres:15-alpine
    container_name: gongbu_postgres
    environment:
      POSTGRES_DB: gongbu_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: "auth_service,course_service,bot_service,payment_service,plugin_service,notification_service,analytics_service"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - gongbu_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: gongbu_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - gongbu_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: gongbu_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - gongbu_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Мониторинг и обсерваемость
  prometheus:
    image: prom/prometheus:latest
    container_name: gongbu_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - gongbu_network

  grafana:
    image: grafana/grafana:latest
    container_name: gongbu_grafana
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - gongbu_network

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.dev
    container_name: gongbu_api_gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/gongbu_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-key-change-in-production
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
      - ./libs:/app/libs
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.dev
    container_name: gongbu_auth_service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/auth_service
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-key-change-in-production
      JWT_EXPIRES_IN: 15m
      REFRESH_TOKEN_EXPIRES_IN: 30d
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules
      - ./libs:/app/libs
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Course Service
  course-service:
    build:
      context: ./services/course-service
      dockerfile: Dockerfile.dev
    container_name: gongbu_course_service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/course_service
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      FILE_STORAGE_TYPE: local
      FILE_STORAGE_PATH: /app/uploads
    volumes:
      - ./services/course-service:/app
      - /app/node_modules
      - ./libs:/app/libs
      - course_uploads:/app/uploads
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Bot Service
  bot-service:
    build:
      context: ./services/bot-service
      dockerfile: Dockerfile.dev
    container_name: gongbu_bot_service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/bot_service
      REDIS_URL: redis://redis:6379
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:3003}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
    volumes:
      - ./services/bot-service:/app
      - /app/node_modules
      - ./libs:/app/libs
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile.dev
    container_name: gongbu_payment_service
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/payment_service
      REDIS_URL: redis://redis:6379
      TELEGRAM_PAYMENT_TOKEN: ${TELEGRAM_PAYMENT_TOKEN:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
    volumes:
      - ./services/payment-service:/app
      - /app/node_modules
      - ./libs:/app/libs
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Plugin Service
  plugin-service:
    build:
      context: ./services/plugin-service
      dockerfile: Dockerfile.dev
    container_name: gongbu_plugin_service
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/plugin_service
      REDIS_URL: redis://redis:6379
    volumes:
      - ./services/plugin-service:/app
      - /app/node_modules
      - ./libs:/app/libs
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile.dev
    container_name: gongbu_notification_service
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/notification_service
      REDIS_URL: redis://redis:6379
      EMAIL_PROVIDER: sendgrid
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      EMAIL_FROM: noreply@gongbu.app
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
      - ./libs:/app/libs
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile.dev
    container_name: gongbu_analytics_service
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: development
      PORT: 3007
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/analytics_service
      REDIS_URL: redis://redis:6379
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-}
    volumes:
      - ./services/analytics-service:/app
      - /app/node_modules
      - ./libs:/app/libs
    networks:
      - gongbu_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  course_uploads:
    driver: local

networks:
  gongbu_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
