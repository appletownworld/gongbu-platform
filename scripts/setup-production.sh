#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gongbu Platform –Ω–∞ VPS
# –ó–∞–ø—É—Å–∫: chmod +x scripts/setup-production.sh && ./scripts/setup-production.sh

set -e

echo "üöÄ –ù–ê–°–¢–†–û–ô–ö–ê GONGBU PLATFORM –ù–ê –ü–†–û–î–ê–ö–®–ù –°–ï–†–í–ï–†–ï"
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç root
if [[ $EUID -ne 0 ]]; then
   print_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
   exit 1
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_DIR="/var/www/gongbu-platform"
DB_NAME="gongbu_platform"
DB_USER="gongbu_user"
DB_PASS="$(openssl rand -base64 32)"
JWT_SECRET="$(openssl rand -base64 64)"

print_status "–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞..."

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–∫–µ—Ç–æ–≤..."
apt update && apt upgrade -y
apt install -y curl wget git vim nginx certbot python3-certbot-nginx software-properties-common

print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 18
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 18..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs
print_success "Node.js $(node --version) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose..."
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
systemctl start docker
systemctl enable docker
curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL..."
apt install -y postgresql postgresql-contrib
systemctl start postgresql
systemctl enable postgresql

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sudo -u postgres psql << EOF
CREATE DATABASE $DB_NAME;
CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASS';
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
ALTER USER $DB_USER CREATEDB;
\q
EOF

print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"

# 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..."
npm install -g pm2
pm2 startup
print_success "PM2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# 6. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
print_status "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
if [ -d "$PROJECT_DIR" ]; then
    print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º..."
    cd $PROJECT_DIR
    git pull origin main
else
    git clone https://github.com/appletownworld/gongbu-platform.git $PROJECT_DIR
    cd $PROJECT_DIR
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
chown -R www-data:www-data $PROJECT_DIR
chmod -R 755 $PROJECT_DIR

print_success "–ü—Ä–æ–µ–∫—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"

# 7. –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > $PROJECT_DIR/.env << EOF
# Production Configuration
NODE_ENV=production
PORT=3000

# Database
DATABASE_URL=postgresql://$DB_USER:$DB_PASS@localhost:5432/$DB_NAME
DB_USER=$DB_USER
DB_PASSWORD=$DB_PASS

# JWT
JWT_SECRET=$JWT_SECRET
JWT_EXPIRES_IN=7d

# Telegram (–¢–†–ï–ë–£–ï–¢ –†–£–ß–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò!)
TELEGRAM_BOT_TOKEN=CHANGE_THIS_TOKEN
TELEGRAM_WEBHOOK_URL=https://yourdomain.com/webhook
WEBAPP_URL=https://yourdomain.com

# Services
AUTH_SERVICE_URL=http://localhost:3001
COURSE_SERVICE_URL=http://localhost:3002
BOT_SERVICE_URL=http://localhost:3003
PAYMENT_SERVICE_URL=http://localhost:3004
NOTIFICATION_SERVICE_URL=http://localhost:3005
ANALYTICS_SERVICE_URL=http://localhost:3006
API_GATEWAY_URL=http://localhost:3007

# Frontend
REACT_APP_API_BASE_URL=https://yourdomain.com/api
REACT_APP_BOT_USERNAME=@your_bot_username

# Redis
REDIS_URL=redis://localhost:6379

# Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
SMTP_HOST=smtp.gmail.com
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# CORS
CORS_ORIGIN=https://yourdomain.com
EOF

print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# 8. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
npm install

# Frontend
cd $PROJECT_DIR/apps/web-app
npm install
cd $PROJECT_DIR

# Bot Service
cd $PROJECT_DIR/services/bot-service
npm install
npx prisma generate
cd $PROJECT_DIR

# Course Service
cd $PROJECT_DIR/services/course-service
npm install
npx prisma generate
cd $PROJECT_DIR

print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# 9. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
print_status "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
cd $PROJECT_DIR/services/bot-service
npm run build 2>/dev/null || print_warning "Bot Service build –º–æ–∂–µ—Ç –Ω–µ —É–¥–∞—Å—Ç—Å—è –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ NestJS setup"

cd $PROJECT_DIR/apps/web-app
npm run build

cd $PROJECT_DIR
print_success "–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω"

# 10. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
cat > /etc/nginx/sites-available/gongbu-platform << 'EOF'
server {
    listen 80;
    server_name _;
    
    # Frontend
    location / {
        root /var/www/gongbu-platform/apps/web-app/dist;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
    
    # API Gateway
    location /api/ {
        proxy_pass http://localhost:3007/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Telegram Webhook
    location /webhook {
        proxy_pass http://localhost:3003/webhook;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health checks
    location /health {
        proxy_pass http://localhost:3003/health;
    }
}
EOF

ln -sf /etc/nginx/sites-available/gongbu-platform /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
nginx -t
systemctl restart nginx

print_success "Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# 11. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
ufw allow 22
ufw allow 80
ufw allow 443
ufw --force enable

print_success "Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# 12. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞..."
mkdir -p /var/backups/gongbu

cat > /var/backups/gongbu/backup.sh << EOF
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/var/backups/gongbu"

# Database backup
pg_dump -h localhost -U $DB_USER $DB_NAME > \$BACKUP_DIR/db_\$DATE.sql

# Files backup
tar -czf \$BACKUP_DIR/files_\$DATE.tar.gz $PROJECT_DIR

# Keep only last 7 days
find \$BACKUP_DIR -type f -mtime +7 -delete

echo "Backup completed: \$DATE"
EOF

chmod +x /var/backups/gongbu/backup.sh

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ cron
(crontab -l 2>/dev/null; echo "0 2 * * * /var/backups/gongbu/backup.sh") | crontab -

print_success "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

echo ""
echo "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
echo "================================="
echo ""
print_success "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
print_success "‚úÖ Node.js $(node --version) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
print_success "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
print_success "‚úÖ PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
print_success "‚úÖ –ü—Ä–æ–µ–∫—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ–±—Ä–∞–Ω"
print_success "‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
print_success "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
echo ""
echo "üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!):"
echo "=================================="
print_warning "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:"
echo "   sudo certbot --nginx -d yourdomain.com"
echo ""
print_warning "2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:"
echo "   nano $PROJECT_DIR/.env"
echo "   –ó–∞–º–µ–Ω–∏—Ç–µ:"
echo "   - TELEGRAM_BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
echo "   - yourdomain.com –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω"
echo "   - @your_bot_username –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞"
echo ""
print_warning "3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
echo "   cd $PROJECT_DIR/services/bot-service && npx prisma db push"
echo "   cd $PROJECT_DIR/services/course-service && npx prisma db push"
echo ""
print_warning "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   cd $PROJECT_DIR"
echo "   # –í–∞—Ä–∏–∞–Ω—Ç 1: Docker"
echo "   docker-compose -f docker-compose.prod.yml up -d"
echo "   # –í–∞—Ä–∏–∞–Ω—Ç 2: PM2"
echo "   pm2 start ecosystem.config.js --env production"
echo ""
print_warning "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:"
echo "   curl http://localhost/health"
echo ""
echo "üìÑ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: $PROJECT_DIR/DEPLOYMENT.md"
echo "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: https://github.com/appletownworld/gongbu-platform"
echo ""
print_success "üöÄ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!"
