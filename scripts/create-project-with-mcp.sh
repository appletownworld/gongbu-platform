#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å MCP PostgreSQL Server
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create-project-with-mcp.sh project_name database_name port

set -e

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -ne 3 ]; then
    echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <project_name> <database_name> <port>"
    echo "üìù –ü—Ä–∏–º–µ—Ä: $0 ecommerce ecommerce_db 5434"
    exit 1
fi

PROJECT_NAME=$1
DATABASE_NAME=$2
PORT=$3
PROJECT_PATH="/home/zebracoder/projects/$PROJECT_NAME"
POSTGRES_PASSWORD="password"

echo "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_NAME"
echo "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DATABASE_NAME"
echo "üîå –ü–æ—Ä—Ç: $PORT"
echo "üìÅ –ü—É—Ç—å: $PROJECT_PATH"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞..."
mkdir -p "$PROJECT_PATH"
cd "$PROJECT_PATH"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º npm –ø—Ä–æ–µ–∫—Ç
echo "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º npm –ø—Ä–æ–µ–∫—Ç..."
npm init -y

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
echo "üèóÔ∏è –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É..."
mkdir -p src/{controllers,models,routes,services}
mkdir -p config
mkdir -p docs

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
echo "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª..."
cat > .env << EOF
# Database Configuration
POSTGRES_URL=postgresql://postgres:$POSTGRES_PASSWORD@localhost:$PORT/$DATABASE_NAME
POSTGRES_HOST=localhost
POSTGRES_PORT=$PORT
POSTGRES_DB=$DATABASE_NAME
POSTGRES_USER=postgres
POSTGRES_PASSWORD=$POSTGRES_PASSWORD

# Application Configuration
NODE_ENV=development
PORT=3000
EOF

# –°–æ–∑–¥–∞–µ–º docker-compose.yml
echo "üê≥ –°–æ–∑–¥–∞–µ–º docker-compose.yml..."
cat > docker-compose.yml << EOF
version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME}_postgres
    environment:
      POSTGRES_DB: $DATABASE_NAME
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    ports:
      - "$PORT:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
EOF

# –°–æ–∑–¥–∞–µ–º README.md
echo "üìö –°–æ–∑–¥–∞–µ–º README.md..."
cat > README.md << EOF
# $PROJECT_NAME

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
\`\`\`bash
docker-compose up -d postgres
\`\`\`

### 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
npm install
\`\`\`

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP PostgreSQL Server

–î–æ–±–∞–≤—å—Ç–µ –≤ \`~/.cursor/mcp.json\`:

\`\`\`json
{
  "mcpServers": {
    "postgres-$PROJECT_NAME": {
      "command": "npx",
      "args": ["@monsoft/mcp-postgres", "--connection-string", "postgresql://postgres:$POSTGRES_PASSWORD@localhost:$PORT/$DATABASE_NAME"],
      "cwd": "$PROJECT_PATH"
    }
  }
}
\`\`\`

### 4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MCP –≤ Cursor

\`\`\`
@mcp –ü–æ–∫–∞–∂–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö $DATABASE_NAME
@mcp –°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É users —Å –ø–æ–ª—è–º–∏ id, email, created_at
@mcp –í—ã–ø–æ–ª–Ω–∏ –∑–∞–ø—Ä–æ—Å: SELECT * FROM users LIMIT 10
\`\`\`

## üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ

- **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** $DATABASE_NAME
- **–ü–æ—Ä—Ç PostgreSQL:** $PORT
- **–ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** $PROJECT_PATH
- **MCP Server:** postgres-$PROJECT_NAME

## üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã

\`\`\`bash
# –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
docker-compose up -d postgres

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
docker-compose down

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
psql -h localhost -p $PORT -U postgres -d $DATABASE_NAME

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
pg_dump -h localhost -p $PORT -U postgres $DATABASE_NAME > backup.sql
\`\`\`
EOF

# –°–æ–∑–¥–∞–µ–º .gitignore
echo "üìù –°–æ–∑–¥–∞–µ–º .gitignore..."
cat > .gitignore << EOF
# Dependencies
node_modules/
npm-debug.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
echo "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
docker-compose up -d postgres

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
if docker exec ${PROJECT_NAME}_postgres pg_isready -U postgres; then
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
echo "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
MCP_CONFIG="{
  \"mcpServers\": {
    \"postgres-$PROJECT_NAME\": {
      \"command\": \"npx\",
      \"args\": [\"@monsoft/mcp-postgres\", \"--connection-string\", \"postgresql://postgres:$POSTGRES_PASSWORD@localhost:$PORT/$DATABASE_NAME\"],
      \"cwd\": \"$PROJECT_PATH\"
    }
  }
}"

echo "üìã –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ ~/.cursor/mcp.json:"
echo ""
echo "$MCP_CONFIG"
echo ""

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π MCP
echo "$MCP_CONFIG" > mcp-config.json

echo "üéâ –ü—Ä–æ–µ–∫—Ç $PROJECT_NAME —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
echo ""
echo "üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $PROJECT_PATH"
echo "üê≥ PostgreSQL: localhost:$PORT"
echo "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DATABASE_NAME"
echo "‚öôÔ∏è MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: mcp-config.json"
echo ""
echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP –≤ ~/.cursor/mcp.json"
echo "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor"
echo "3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: @mcp –ü–æ–∫–∞–∂–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö $DATABASE_NAME"
echo ""
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md"
