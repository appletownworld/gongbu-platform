#!/usr/bin/env node

/**
 * üåê –°–∏–º—É–ª—è—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è Gongbu
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ Chrome
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

class RealBrowserSimulator {
  constructor(baseUrl = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
    this.session = axios.create({
      timeout: 15000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      }
    });
  }

  // –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–∫–∞–µ—Ç –ø–æ —Å—Å—ã–ª–∫–∞–º —Ñ—É—Ç–µ—Ä–∞
  async simulateUserJourney() {
    console.log('üë§ ========== –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========\n');
    
    const userScenarios = [
      {
        name: "üè† –ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –∏–∑—É—á–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É",
        path: "/",
        nextPages: ["/about", "/how-it-works", "/courses"],
        expectations: {
          shouldLoad: true,
          hasReactApp: true,
          description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é, —á–∏—Ç–∞–µ—Ç –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Å–º–æ—Ç—Ä–∏—Ç –∫—É—Ä—Å—ã"
        }
      },
      {
        name: "üìö –°—Ç—É–¥–µ–Ω—Ç –∏—â–µ—Ç –∫—É—Ä—Å—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
        path: "/courses", 
        nextPages: ["/instructors", "/categories", "/certificates"],
        expectations: {
          shouldLoad: true,
          hasReactApp: true,
          description: "–°—Ç—É–¥–µ–Ω—Ç –∏–∑—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"
        }
      },
      {
        name: "‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –ø–æ–º–æ—â—å",
        path: "/help",
        nextPages: ["/faq", "/contact", "/report"],
        expectations: {
          shouldLoad: true, 
          hasReactApp: true,
          description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
        }
      },
      {
        name: "‚öñÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∏—Ç–∞–µ—Ç –ø—Ä–∞–≤–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", 
        path: "/privacy",
        nextPages: ["/terms"],
        expectations: {
          shouldLoad: true,
          hasReactApp: true,
          description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        }
      },
      {
        name: "üîê –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        path: "/register",
        nextPages: ["/login"],
        expectations: {
          shouldLoad: true,
          hasReactApp: true,
          description: "–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞"
        }
      }
    ];

    let totalTests = 0;
    let passedTests = 0;
    let failedTests = 0;

    for (const scenario of userScenarios) {
      console.log(`\n${scenario.name}`);
      console.log(`üìù ${scenario.description}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const mainPageResult = await this.testPageAsUser(scenario.path);
      totalTests++;
      
      if (mainPageResult.success) {
        passedTests++;
        console.log(`‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      } else {
        failedTests++;
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π: ${mainPageResult.error}`);
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º)
      for (const nextPage of scenario.nextPages) {
        console.log(`   üîó –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ: ${nextPage}`);
        const result = await this.testPageAsUser(nextPage);
        totalTests++;
        
        if (result.success) {
          passedTests++;
          console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${nextPage} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        } else {
          failedTests++;
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ ${nextPage}: ${result.error}`);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏ (–∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        await new Promise(resolve => setTimeout(resolve, 200));
      }
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const successRate = totalTests > 0 ? (passedTests / totalTests * 100).toFixed(1) : 0;
    console.log('\nüéØ ========== –ò–¢–û–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========');
    console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} (${successRate}%)`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${passedTests}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${failedTests}`);

    if (successRate >= 90) {
      console.log('\nüèÜ –û–¢–õ–ò–ß–ù–û! –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } else if (successRate >= 75) {
      console.log('\nüëç –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
    } else {
      console.log('\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤');
    }

    return {
      totalTests,
      passedTests,
      failedTests,
      successRate: parseFloat(successRate)
    };
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async testPageAsUser(path) {
    try {
      const startTime = Date.now();
      const response = await this.session.get(`${this.baseUrl}${path}`);
      const loadTime = Date.now() - startTime;

      // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (response.status !== 200) {
        return {
          success: false,
          error: `HTTP ${response.status}`,
          loadTime
        };
      }

      const html = response.data;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ 404 —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      const bodyLower = html.toLowerCase();
      if (bodyLower.includes('404') || bodyLower.includes('not found') || bodyLower.includes('—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
        return {
          success: false,
          error: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è 404 —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
          loadTime
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const hasReactRoot = html.includes('<div id="root">');
      const hasViteClient = html.includes('@vite/client');
      const hasReactRefresh = html.includes('react-refresh');

      if (!hasReactRoot) {
        return {
          success: false,
          error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç React root —ç–ª–µ–º–µ–Ω—Ç",
          loadTime
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const titleMatch = html.match(/<title>([^<]+)<\/title>/);
      const title = titleMatch ? titleMatch[1] : '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
      
      if (!title.includes('Gongbu')) {
        return {
          success: false,
          error: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${title}"`,
          loadTime
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
      const hasDescription = html.includes('name="description"');
      const hasViewport = html.includes('name="viewport"');

      return {
        success: true,
        loadTime,
        title,
        hasReactRoot,
        hasViteClient,
        hasReactRefresh,
        hasDescription,
        hasViewport,
        htmlSize: Buffer.byteLength(html, 'utf8')
      };

    } catch (error) {
      return {
        success: false,
        error: error.message,
        loadTime: 0
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ—É—Ç–µ—Ä–∞  
  async testFooterLinks() {
    console.log('\nü¶∂ ========== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–û–ö –§–£–¢–ï–†–ê ==========\n');
    
    const footerSections = {
      "–ü–õ–ê–¢–§–û–†–ú–ê": [
        { path: "/about", name: "–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ" },
        { path: "/how-it-works", name: "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç" },
        { path: "/pricing", name: "–¶–µ–Ω—ã" },
        { path: "/faq", name: "FAQ" }
      ],
      "–û–ë–£–ß–ï–ù–ò–ï": [
        { path: "/courses", name: "–í—Å–µ –∫—É—Ä—Å—ã" },
        { path: "/categories", name: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" },
        { path: "/instructors", name: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" },
        { path: "/certificates", name: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã" }
      ],
      "–ü–û–î–î–ï–†–ñ–ö–ê": [
        { path: "/help", name: "–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏" },
        { path: "/contact", name: "–ö–æ–Ω—Ç–∞–∫—Ç—ã" },
        { path: "/report", name: "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ" },
        { path: "/status", name: "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã" }
      ],
      "–ü–†–ê–í–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø": [
        { path: "/privacy", name: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏" },
        { path: "/terms", name: "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" }
      ]
    };

    const results = {};
    let totalLinks = 0;
    let workingLinks = 0;

    for (const [section, links] of Object.entries(footerSections)) {
      console.log(`üìÇ ${section}:`);
      results[section] = { total: links.length, working: 0, failed: 0 };
      
      for (const link of links) {
        const result = await this.testPageAsUser(link.path);
        totalLinks++;
        
        if (result.success) {
          workingLinks++;
          results[section].working++;
          console.log(`   ‚úÖ ${link.name} - OK (${result.loadTime}ms)`);
        } else {
          results[section].failed++;
          console.log(`   ‚ùå ${link.name} - ${result.error}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      const sectionPercent = (results[section].working / results[section].total * 100).toFixed(0);
      console.log(`   üìä ${section}: ${results[section].working}/${results[section].total} (${sectionPercent}%)\n`);
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const overallPercent = (workingLinks / totalLinks * 100).toFixed(1);
    console.log('üéØ ========== –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–£–¢–ï–†–ê ==========');
    console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${workingLinks}/${totalLinks} —Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç (${overallPercent}%)`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    for (const [section, stats] of Object.entries(results)) {
      const percent = (stats.working / stats.total * 100).toFixed(0);
      const status = percent == 100 ? 'üü¢' : percent >= 75 ? 'üü°' : 'üî¥';
      console.log(`${status} ${section}: ${stats.working}/${stats.total} (${percent}%)`);
    }

    if (overallPercent >= 90) {
      console.log('\nüéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –ü–æ—á—Ç–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Ñ—É—Ç–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç');
    } else if (overallPercent >= 75) {  
      console.log('\nüëç –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ —Ñ—É—Ç–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã');
    } else {
      console.log('\n‚ö†Ô∏è –ù–£–ñ–ù–´ –î–û–†–ê–ë–û–¢–ö–ò! –ú–Ω–æ–≥–æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å—Å—ã–ª–æ–∫');
    }

    return {
      totalLinks,
      workingLinks, 
      successRate: parseFloat(overallPercent),
      sectionResults: results
    };
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ë–†–ê–£–ó–ï–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n');
    
    const results = {
      timestamp: new Date().toISOString(),
      baseUrl: this.baseUrl
    };

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    results.userJourney = await this.simulateUserJourney();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ —Ñ—É—Ç–µ—Ä–∞
    results.footerLinks = await this.testFooterLinks();

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportDir = path.join(__dirname, 'test-reports');
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, { recursive: true });
    }
    
    const reportPath = path.join(reportDir, `real-browser-test-${new Date().toISOString().replace(/:/g, '-')}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));

    // 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
    console.log('\nüèÅ ========== –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï ==========');
    console.log(`üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${this.baseUrl}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏: ${results.userJourney.successRate}% —É—Å–ø–µ—Ö–∞`);
    console.log(`ü¶∂ –°—Å—ã–ª–∫–∏ —Ñ—É—Ç–µ—Ä–∞: ${results.footerLinks.successRate}% —Ä–∞–±–æ—Ç–∞—é—Ç`);
    console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: ${reportPath}`);

    const overallScore = (results.userJourney.successRate + results.footerLinks.successRate) / 2;
    if (overallScore >= 90) {
      console.log('\nüèÜ –°–ê–ô–¢ –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò! üèÜ');
    } else if (overallScore >= 75) {
      console.log('\n‚úÖ –°–ê–ô–¢ –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û!');
    } else {
      console.log('\n‚ö†Ô∏è –°–ê–ô–¢ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò');
    }

    console.log(`\nüî¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${overallScore.toFixed(1)}/100`);
    
    return results;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const simulator = new RealBrowserSimulator();
  simulator.runAllTests()
    .then(results => {
      console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = RealBrowserSimulator;
