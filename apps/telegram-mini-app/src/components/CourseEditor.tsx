import React, { useState } from 'react';
import { Lesson } from '../hooks/useCourses';

interface CourseEditorProps {
  course?: any;
  onSave: (courseId: string, updates: any) => Promise<void>;
  onCreate: (courseData: any) => Promise<any>;
  onCancel: () => void;
}

export const CourseEditor: React.FC<CourseEditorProps> = ({
  course,
  onSave,
  onCreate,
  onCancel,
}) => {
  const [formData, setFormData] = useState({
    title: course?.title || '',
    description: course?.description || '',
    image: course?.image || '',
  });
  const [lessons, setLessons] = useState<Lesson[]>(course?.lessons || []);
  const [isSaving, setIsSaving] = useState(false);
  const [activeTab, setActiveTab] = useState<'info' | 'lessons'>('info');

  const handleSave = async () => {
    try {
      setIsSaving(true);
      
      if (course) {
        await onSave(course.id, { ...formData, lessons });
      } else {
        await onCreate({ ...formData, lessons });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const addLesson = () => {
    const newLesson: Lesson = {
      id: `lesson-${Date.now()}`,
      title: '–ù–æ–≤—ã–π —É—Ä–æ–∫',
      description: '',
      content: '',
      type: 'text',
      order: lessons.length + 1,
      isPaid: false,
    };
    setLessons([...lessons, newLesson]);
  };

  const updateLesson = (lessonId: string, updates: Partial<Lesson>) => {
    setLessons(lessons.map(lesson =>
      lesson.id === lessonId ? { ...lesson, ...updates } : lesson
    ));
  };

  const deleteLesson = (lessonId: string) => {
    setLessons(lessons.filter(lesson => lesson.id !== lessonId));
  };

  const moveLesson = (lessonId: string, direction: 'up' | 'down') => {
    const index = lessons.findIndex(lesson => lesson.id === lessonId);
    if (index === -1) return;

    const newLessons = [...lessons];
    if (direction === 'up' && index > 0) {
      [newLessons[index], newLessons[index - 1]] = [newLessons[index - 1], newLessons[index]];
    } else if (direction === 'down' && index < lessons.length - 1) {
      [newLessons[index], newLessons[index + 1]] = [newLessons[index + 1], newLessons[index]];
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    newLessons.forEach((lesson, idx) => {
      lesson.order = idx + 1;
    });

    setLessons(newLessons);
  };

  return (
    <div className="course-editor">
      <div className="editor-header">
        <h1>{course ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞'}</h1>
        <div className="editor-actions">
          <button onClick={onCancel} className="btn-secondary">
            –û—Ç–º–µ–Ω–∞
          </button>
          <button 
            onClick={handleSave} 
            className="btn-primary"
            disabled={isSaving}
          >
            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
        </div>
      </div>

      <div className="editor-tabs">
        <button
          className={`tab ${activeTab === 'info' ? 'active' : ''}`}
          onClick={() => setActiveTab('info')}
        >
          üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        </button>
        <button
          className={`tab ${activeTab === 'lessons' ? 'active' : ''}`}
          onClick={() => setActiveTab('lessons')}
        >
          üìö –£—Ä–æ–∫–∏ ({lessons.length})
        </button>
      </div>

      <div className="editor-content">
        {activeTab === 'info' && (
          <div className="course-info-editor">
            <div className="form-group">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞"
                className="form-input"
              />
            </div>

            <div className="form-group">
              <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑—É—á–∞—é—Ç –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ"
                className="form-textarea"
                rows={4}
              />
            </div>

            <div className="form-group">
              <label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (URL)</label>
              <input
                type="url"
                value={formData.image}
                onChange={(e) => setFormData({ ...formData, image: e.target.value })}
                placeholder="https://example.com/image.jpg"
                className="form-input"
              />
              {formData.image && (
                <div className="image-preview">
                  <img src={formData.image} alt="–ü—Ä–µ–≤—å—é" />
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'lessons' && (
          <div className="lessons-editor">
            <div className="lessons-header">
              <h3>–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞</h3>
              <button onClick={addLesson} className="btn-primary">
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫
              </button>
            </div>

            <div className="lessons-list">
              {lessons.map((lesson, index) => (
                <LessonEditor
                  key={lesson.id}
                  lesson={lesson}
                  index={index}
                  onUpdate={(updates) => updateLesson(lesson.id, updates)}
                  onDelete={() => deleteLesson(lesson.id)}
                  onMove={(direction) => moveLesson(lesson.id, direction)}
                  canMoveUp={index > 0}
                  canMoveDown={index < lessons.length - 1}
                />
              ))}

              {lessons.length === 0 && (
                <div className="empty-lessons">
                  <p>–£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                  <button onClick={addLesson} className="btn-primary">
                    –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

interface LessonEditorProps {
  lesson: Lesson;
  index: number;
  onUpdate: (updates: Partial<Lesson>) => void;
  onDelete: () => void;
  onMove: (direction: 'up' | 'down') => void;
  canMoveUp: boolean;
  canMoveDown: boolean;
}

const LessonEditor: React.FC<LessonEditorProps> = ({
  lesson,
  index,
  onUpdate,
  onDelete,
  onMove,
  canMoveUp,
  canMoveDown,
}) => {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <div className="lesson-editor">
      <div className="lesson-header" onClick={() => setIsExpanded(!isExpanded)}>
        <div className="lesson-info">
          <span className="lesson-number">{index + 1}</span>
          <div className="lesson-details">
            <h4>{lesson.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
            <span className="lesson-type">{getLessonTypeLabel(lesson.type)}</span>
            {lesson.isPaid && (
              <span className="lesson-price">
                üí∞ {lesson.price} {lesson.currency || 'RUB'}
              </span>
            )}
          </div>
        </div>
        <div className="lesson-actions">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onMove('up');
            }}
            disabled={!canMoveUp}
            className="btn-icon"
          >
            ‚¨ÜÔ∏è
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              onMove('down');
            }}
            disabled={!canMoveDown}
            className="btn-icon"
          >
            ‚¨áÔ∏è
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              onDelete();
            }}
            className="btn-icon danger"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>

      {isExpanded && (
        <div className="lesson-content">
          <div className="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</label>
            <input
              type="text"
              value={lesson.title}
              onChange={(e) => onUpdate({ title: e.target.value })}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞"
              className="form-input"
            />
          </div>

          <div className="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea
              value={lesson.description}
              onChange={(e) => onUpdate({ description: e.target.value })}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"
              className="form-textarea"
              rows={2}
            />
          </div>

          <div className="form-group">
            <label>–¢–∏–ø —É—Ä–æ–∫–∞</label>
            <select
              value={lesson.type}
              onChange={(e) => onUpdate({ type: e.target.value as Lesson['type'] })}
              className="form-select"
            >
              <option value="text">üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫</option>
              <option value="video">üé• –í–∏–¥–µ–æ —É—Ä–æ–∫</option>
              <option value="quiz">‚ùì –ö–≤–∏–∑</option>
              <option value="assignment">üìã –ó–∞–¥–∞–Ω–∏–µ</option>
            </select>
          </div>

          <div className="form-group">
            <label>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ</label>
            <textarea
              value={lesson.content}
              onChange={(e) => onUpdate({ content: e.target.value })}
              placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞..."
              className="form-textarea"
              rows={6}
            />
          </div>

          <div className="form-group">
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={lesson.isPaid}
                onChange={(e) => onUpdate({ isPaid: e.target.checked })}
              />
              <span>–ü–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫</span>
            </label>
          </div>

          {lesson.isPaid && (
            <div className="form-row">
              <div className="form-group">
                <label>–¶–µ–Ω–∞</label>
                <input
                  type="number"
                  value={lesson.price || 0}
                  onChange={(e) => onUpdate({ price: Number(e.target.value) })}
                  placeholder="0"
                  className="form-input"
                />
              </div>
              <div className="form-group">
                <label>–í–∞–ª—é—Ç–∞</label>
                <select
                  value={lesson.currency || 'RUB'}
                  onChange={(e) => onUpdate({ currency: e.target.value })}
                  className="form-select"
                >
                  <option value="RUB">RUB</option>
                  <option value="USD">USD</option>
                  <option value="EUR">EUR</option>
                </select>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

function getLessonTypeLabel(type: Lesson['type']): string {
  switch (type) {
    case 'text': return 'üìù –¢–µ–∫—Å—Ç';
    case 'video': return 'üé• –í–∏–¥–µ–æ';
    case 'quiz': return '‚ùì –ö–≤–∏–∑';
    case 'assignment': return 'üìã –ó–∞–¥–∞–Ω–∏–µ';
    default: return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}
