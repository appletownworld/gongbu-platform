import React, { useState, useRef } from 'react';
import FileUpload, { FileUploadProps, UploadResult } from './FileUpload';
import { VideoCameraIcon, PlayIcon } from '@heroicons/react/24/outline';
import { clsx } from 'clsx';

interface VideoUploadProps extends Omit<FileUploadProps, 'accept' | 'children' | 'context'> {
  context: 'lesson-video';
  showPreview?: boolean;
  maxDuration?: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  generateThumbnail?: boolean;
}

interface VideoInfo {
  duration: number;
  width: number;
  height: number;
  size: number;
  thumbnailUrl?: string;
}

const VideoUpload: React.FC<VideoUploadProps> = ({
  context,
  showPreview = true,
  maxDuration,
  generateThumbnail = true,
  onUpload,
  maxSize = 500 * 1024 * 1024, // 500MB –¥–ª—è –≤–∏–¥–µ–æ
  className,
  ...props
}) => {
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [videoInfo, setVideoInfo] = useState<VideoInfo | null>(null);
  const [uploadedVideo, setUploadedVideo] = useState<UploadResult | null>(null);
  const [thumbnailUrl, setThumbnailUrl] = useState<string | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
  const getVideoInfo = (file: File): Promise<VideoInfo> => {
    return new Promise((resolve, reject) => {
      const video = document.createElement('video');
      const url = URL.createObjectURL(file);
      
      video.onloadedmetadata = () => {
        const info: VideoInfo = {
          duration: video.duration,
          width: video.videoWidth,
          height: video.videoHeight,
          size: file.size
        };
        
        URL.revokeObjectURL(url);
        resolve(info);
      };
      
      video.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ'));
      };
      
      video.src = url;
    });
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –≤–∏–¥–µ–æ
  const generateVideoThumbnail = (videoFile: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const video = document.createElement('video');
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        reject(new Error('Canvas context not available'));
        return;
      }

      video.onloadeddata = () => {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ 10% –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        video.currentTime = video.duration * 0.1;
      };

      video.onseeked = () => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        // –†–∏—Å—É–µ–º –∫–∞–¥—Ä –Ω–∞ canvas
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        // –ü–æ–ª—É—á–∞–µ–º data URL
        const thumbnailDataUrl = canvas.toDataURL('image/jpeg', 0.8);
        URL.revokeObjectURL(video.src);
        resolve(thumbnailDataUrl);
      };

      video.onerror = () => {
        URL.revokeObjectURL(video.src);
        reject(new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ'));
      };

      video.src = URL.createObjectURL(videoFile);
    });
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatDuration = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  const handleUpload = async (files: File[]): Promise<UploadResult[]> => {
    const file = files[0]; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
      const info = await getVideoInfo(file);
      setVideoInfo(info);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      if (maxDuration && info.duration > maxDuration) {
        throw new Error(`–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(maxDuration)}`);
      }

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
      if (showPreview) {
        const videoUrl = URL.createObjectURL(file);
        setPreviewUrl(videoUrl);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
      if (generateThumbnail) {
        try {
          const thumbnail = await generateVideoThumbnail(file);
          setThumbnailUrl(thumbnail);
        } catch (error) {
          console.warn('Failed to generate thumbnail:', error);
        }
      }

      // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
      const results = await onUpload(files);
      
      if (results.length > 0) {
        setUploadedVideo(results[0]);
      }

      return results;

    } catch (error) {
      console.error('Video upload error:', error);
      throw error;
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className={clsx('space-y-4', className)}>
      {/* –ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ */}
      {showPreview && (uploadedVideo?.url || previewUrl) && (
        <div className="relative bg-black rounded-lg overflow-hidden">
          <video
            ref={videoRef}
            src={uploadedVideo?.url || previewUrl || ''}
            className="w-full h-auto max-h-64"
            controls
            preload="metadata"
          >
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
          </video>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ */}
          {videoInfo && (
            <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-75 text-white p-2">
              <div className="flex justify-between text-xs">
                <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {formatDuration(videoInfo.duration)}</span>
                <span>–†–∞–∑–º–µ—Ä: {formatFileSize(videoInfo.size)}</span>
                <span>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {videoInfo.width}√ó{videoInfo.height}</span>
              </div>
            </div>
          )}
        </div>
      )}

      {/* –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ (–µ—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞) */}
      {thumbnailUrl && (
        <div className="bg-gray-50 rounded-lg p-3">
          <div className="text-xs font-medium text-gray-700 mb-2">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞:
          </div>
          <div className="relative inline-block">
            <img 
              src={thumbnailUrl} 
              alt="–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –≤–∏–¥–µ–æ" 
              className="w-32 h-18 object-cover rounded border"
            />
            <div className="absolute inset-0 flex items-center justify-center">
              <PlayIcon className="w-8 h-8 text-white drop-shadow-lg" />
            </div>
          </div>
        </div>
      )}

      <FileUpload
        {...props}
        accept="video/mp4,video/webm,video/avi,video/mov,video/quicktime"
        multiple={false}
        maxFiles={1}
        maxSize={maxSize}
        context={context}
        onUpload={handleUpload}
        helperText="MP4, WebM, AVI, MOV –¥–æ 500–ú–ë"
      >
        <div className="space-y-2">
          <VideoCameraIcon className="w-12 h-12 text-gray-400 mx-auto" />
          <div>
            <div className="text-sm font-medium text-gray-900">
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞
            </div>
            <div className="text-xs text-gray-500 mt-1">
              MP4, WebM, AVI, MOV –¥–æ 500–ú–ë
              {maxDuration && ` ‚Ä¢ –ú–∞–∫—Å. ${formatDuration(maxDuration)}`}
            </div>
          </div>
        </div>
      </FileUpload>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–¥–µ–æ */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3">
        <div className="text-xs text-yellow-800">
          <strong>üé• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ:</strong>
          <ul className="mt-1 list-disc list-inside space-y-0.5">
            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç MP4 –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</li>
            <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1920√ó1080 (Full HD) –∏–ª–∏ 1280√ó720 (HD)</li>
            <li>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: 24-30 FPS</li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ —á–µ—Ç–∫–æ–µ –∞—É–¥–∏–æ</li>
            <li>–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ —Å –≤–≤–µ–¥–µ–Ω–∏–µ–º –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º</li>
          </ul>
        </div>
      </div>

      {/* –°–∫—Ä—ã—Ç—ã–π canvas –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä */}
      <canvas ref={canvasRef} className="hidden" />
    </div>
  );
};

export default VideoUpload;
