import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { User, UserRole } from '@/types/auth'
import { authApi } from '@/services/api'
import { autoAuthService, AutoAuthResult } from '@/services/autoAuth'
import toast from 'react-hot-toast'

interface AuthContextType {
  user: User | null
  isLoading: boolean
  isAuthenticated: boolean
  authSource: 'telegram' | 'stored_tokens' | 'none' | null
  login: (initData: string) => Promise<void>
  autoLogin: () => Promise<boolean>
  logout: () => Promise<void>
  refreshToken: () => Promise<void>
  hasRole: (role: UserRole | UserRole[]) => boolean
  isTelegramWebApp: () => boolean
  loadMockAdmin: () => void
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

interface AuthProviderProps {
  children: ReactNode
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [authSource, setAuthSource] = useState<'telegram' | 'stored_tokens' | 'none' | null>(null)

  const isAuthenticated = !!user

  // Initialize auth on app start
  useEffect(() => {
    initializeAuth()
  }, [])

  const initializeAuth = async () => {
    try {
      console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º mock –¥–∞–Ω–Ω—ã–µ
      if (import.meta.env.DEV) {
        const mockAdmin = localStorage.getItem('mockAdmin')
        if (mockAdmin) {
          const adminData = JSON.parse(mockAdmin)
          setUser(adminData)
          setAuthSource('stored_tokens')
          console.log('‚úÖ Mock –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω')
          setIsLoading(false)
          return
        }
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
      autoAuthService.setupTokenRefresh()
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const result: AutoAuthResult = await autoAuthService.attemptAutoAuth()
      
      if (result.success && result.user) {
        setUser(result.user)
        setAuthSource(result.source)
        
        const sourceMessages: Record<string, string> = {
          'telegram': '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp',
          'stored_tokens': '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã',
          'none': '–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        }
        
        console.log(sourceMessages[result.source] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (result.source === 'telegram') {
          toast.success('üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gongbu!', {
            duration: 3000,
            icon: 'üëã'
          })
        }
      } else {
        setAuthSource('none')
        console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
      setAuthSource('none')
      
      // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      autoAuthService.clearAuthData()
    } finally {
      setIsLoading(false)
      console.log('üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    }
  }

  const login = async (initData: string) => {
    try {
      setIsLoading(true)
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (import.meta.env.DEV) {
        const mockAdmin = localStorage.getItem('mockAdmin')
        if (mockAdmin) {
          const adminData = JSON.parse(mockAdmin)
          setUser(adminData)
          setAuthSource('stored_tokens')
          toast.success('üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', {
            duration: 3000,
            icon: 'üëã'
          })
          return
        }
      }
      
      const response = await authApi.login({
        initData,
        deviceInfo: {
          userAgent: navigator.userAgent,
          platform: 'web',
          version: '1.0.0',
          isTelegramWebApp: autoAuthService.isTelegramWebApp()
        },
        ipAddress: '127.0.0.1', // Will be replaced by actual IP in production
      })

      // Store tokens —á–µ—Ä–µ–∑ autoAuthService
      localStorage.setItem('gongbu_access_token', response.accessToken)
      localStorage.setItem('gongbu_refresh_token', response.refreshToken)
      localStorage.setItem('gongbu_user_data', JSON.stringify(response.user))

      // Set user data
      setUser(response.user)
      setAuthSource('telegram')
      
      toast.success('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', {
        duration: 4000,
        icon: 'üöÄ'
      })
    } catch (error: any) {
      console.error('Login error:', error)
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É'
      toast.error(errorMessage, {
        duration: 5000,
        icon: '‚ùå'
      })
      throw error
    } finally {
      setIsLoading(false)
    }
  }

  const autoLogin = async (): Promise<boolean> => {
    try {
      setIsLoading(true)
      
      const result: AutoAuthResult = await autoAuthService.attemptAutoAuth()
      
      if (result.success && result.user) {
        setUser(result.user)
        setAuthSource(result.source)
        console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑: ${result.source}`)
        return true
      }
      
      return false
    } catch (error) {
      console.error('Auto login failed:', error)
      return false
    } finally {
      setIsLoading(false)
    }
  }

  const logout = async () => {
    try {
      setIsLoading(true)
      console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...')
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º autoAuthService –¥–ª—è –ª–æ–≥–∞—É—Ç–∞
      await autoAuthService.logout()
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setUser(null)
      setAuthSource('none')
      
      toast.success('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', {
        duration: 3000,
        icon: '‚úÖ'
      })
      
      console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error)
      
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      autoAuthService.clearAuthData()
      setUser(null)
      setAuthSource('none')
      
      toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    } finally {
      setIsLoading(false)
    }
  }

  const refreshToken = async () => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...')
      
      const refreshTokenValue = autoAuthService.getRefreshToken()
      if (!refreshTokenValue) {
        throw new Error('No refresh token available')
      }

      const response = await authApi.refreshToken(refreshTokenValue)
      
      // Update tokens —á–µ—Ä–µ–∑ autoAuthService
      localStorage.setItem('gongbu_access_token', response.accessToken)
      localStorage.setItem('gongbu_refresh_token', response.refreshToken)

      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      
      // Clear tokens and user state
      autoAuthService.clearAuthData()
      setUser(null)
      setAuthSource('none')
      
      throw error
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const hasRole = (role: UserRole | UserRole[]): boolean => {
    if (!user) return false
    
    if (Array.isArray(role)) {
      return role.includes(user.role as UserRole)
    }
    
    return user.role === role
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram WebApp
  const isTelegramWebApp = (): boolean => {
    return autoAuthService.isTelegramWebApp()
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ mock –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const loadMockAdmin = () => {
    if (import.meta.env.DEV) {
      const mockAdmin = localStorage.getItem('mockAdmin')
      if (mockAdmin) {
        const adminData = JSON.parse(mockAdmin)
        setUser(adminData)
        setAuthSource('stored_tokens')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem('gongbu_user_data', JSON.stringify(adminData))
        localStorage.setItem('gongbu_access_token', 'mock_access_token')
        localStorage.setItem('gongbu_refresh_token', 'mock_refresh_token')
        
        toast.success('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω!')
      }
    }
  }

  const value: AuthContextType = {
    user,
    isLoading,
    isAuthenticated,
    authSource,
    login,
    autoLogin,
    logout,
    refreshToken,
    hasRole,
    isTelegramWebApp,
    loadMockAdmin,
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
