const http = require('http')
const url = require('url')

// Mock –¥–∞–Ω–Ω—ã–µ
const courses = [{
  id: 'course-123',
  title: 'Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
  slug: 'python-for-beginners',
  description: '–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python —Å –Ω—É–ª—è',
  shortDescription: '–ò–∑—É—á–∏—Ç–µ Python –∑–∞ 30 –¥–Ω–µ–π',
  category: 'PROGRAMMING',
  difficulty: 'BEGINNER',
  language: 'ru',
  estimatedDuration: 2400,
  price: 4999,
  currency: 'RUB',
  isPremium: false,
  isPublished: true,
  tags: ['python', 'programming', 'beginner'],
  creatorId: 'user-123',
  lessonCount: 3,
  enrollmentCount: 142,
  averageRating: 4.7,
  reviewCount: 45,
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  creator: {
    id: 'user-123',
    name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'
  }
}]

const lessons = [
  {
    id: 'lesson-1',
    title: '–£—Ä–æ–∫ 1: –í–≤–µ–¥–µ–Ω–∏–µ –≤ Python',
    slug: 'lesson-1-intro',
    content: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å Python! 

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –æ—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python. 

## –ß—Ç–æ —Ç–∞–∫–æ–µ Python?

Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è:
- –ü—Ä–æ—Å—Ç–æ—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
- –ú–æ—â–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏  
- –ë–æ–ª—å—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Python

Python –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
- –ê–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ú–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏  
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –ù–∞—É—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ –∏–∑—É—á–µ–Ω–∏–µ!`,
    contentType: 'TEXT',
    videoUrl: null,
    audioUrl: null,
    order: 1,
    duration: 15,
    isPreview: true,
    isRequired: true,
    courseId: 'course-123',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'lesson-2',
    title: '–£—Ä–æ–∫ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python',
    slug: 'lesson-2-installation',
    content: `# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –Ω–∞—É—á–∏–º—Å—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å Python –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.

## Windows
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ python.org
2. –°–∫–∞—á–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
4. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É "Add Python to PATH"

## macOS
\`\`\`bash
brew install python
\`\`\`

## Linux (Ubuntu/Debian)
\`\`\`bash
sudo apt update
sudo apt install python3 python3-pip
\`\`\`

–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
\`\`\`bash
python --version
\`\`\``,
    contentType: 'VIDEO',
    videoUrl: 'https://www.youtube.com/embed/YKSpANU8jKo',
    audioUrl: null,
    order: 2,
    duration: 20,
    isPreview: false,
    isRequired: true,
    courseId: 'course-123',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'lesson-3',
    title: '–£—Ä–æ–∫ 3: –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
    slug: 'lesson-3-first-program',
    content: `# –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Python

–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à—É –ø–µ—Ä–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python!

## Hello, World!

–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ, –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:

\`\`\`python
print("Hello, World!")
print("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
\`\`\`

## –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

Python –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:

\`\`\`python
name = "–ò–≤–∞–Ω"
age = 25
height = 1.75

print(f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {name}")
print(f"–ú–Ω–µ {age} –ª–µ—Ç")
print(f"–ú–æ–π —Ä–æ—Å—Ç {height} –º–µ—Ç—Ä–∞")
\`\`\`

## –ó–∞–¥–∞–Ω–∏–µ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è:
1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—à–µ –∏–º—è
2. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å
3. –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç
4. –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å

## –†–µ—à–µ–Ω–∏–µ

\`\`\`python
name = input("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ")
age = input("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? ")

print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")
print(f"–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤–∞–º {age} –ª–µ—Ç!")
\`\`\`

–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!`,
    contentType: 'TEXT',
    videoUrl: null,
    audioUrl: null,
    order: 3,
    duration: 25,
    isPreview: false,
    isRequired: true,
    courseId: 'course-123',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
]

function sendJSON(res, data, status = 200) {
  res.writeHead(status, {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization'
  })
  res.end(JSON.stringify(data))
}

function handleRequest(req, res) {
  const parsedUrl = url.parse(req.url, true)
  const path = parsedUrl.pathname
  const method = req.method

  // Handle CORS preflight
  if (method === 'OPTIONS') {
    res.writeHead(200, {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    })
    res.end()
    return
  }

  console.log(`${method} ${path}`)

  // Routes
  if (path === '/courses' && method === 'GET') {
    const { isPublished = 'true' } = parsedUrl.query
    const filteredCourses = isPublished === 'true' 
      ? courses.filter(c => c.isPublished)
      : courses
    
    sendJSON(res, {
      courses: filteredCourses,
      pagination: {
        page: 1,
        limit: 10,
        totalItems: filteredCourses.length,
        totalPages: 1,
        hasNext: false,
        hasPrev: false
      }
    })
  }
  else if (path.startsWith('/courses/slug/') && method === 'GET') {
    const slug = path.split('/courses/slug/')[1]
    const course = courses.find(c => c.slug === slug)
    if (course) {
      sendJSON(res, course)
    } else {
      sendJSON(res, { message: 'Course not found' }, 404)
    }
  }
  else if (path.startsWith('/lessons/course/') && method === 'GET') {
    const courseId = path.split('/lessons/course/')[1]
    const courseLessons = lessons.filter(l => l.courseId === courseId)
    sendJSON(res, courseLessons.sort((a, b) => a.order - b.order))
  }
  else if (path === '/health' && method === 'GET') {
    sendJSON(res, { status: 'OK', service: 'Mock Backend', timestamp: new Date().toISOString() })
  }
  else {
    sendJSON(res, { message: 'Not found', path, method }, 404)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
const courseServer = http.createServer(handleRequest)
courseServer.listen(3002, () => {
  console.log('üöÄ Mock Course Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3002')
})

// Auth server
const authServer = http.createServer((req, res) => {
  const parsedUrl = url.parse(req.url, true)
  const path = parsedUrl.pathname
  const method = req.method

  if (method === 'OPTIONS') {
    res.writeHead(200, {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    })
    res.end()
    return
  }

  console.log(`AUTH: ${method} ${path}`)

  if (path === '/login' && method === 'POST') {
    sendJSON(res, {
      accessToken: 'mock-access-token',
      refreshToken: 'mock-refresh-token',
      user: {
        id: 'user-123',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        username: 'ivan_petrov',
        role: 'INSTRUCTOR'
      }
    })
  } else {
    sendJSON(res, { message: 'Not found' }, 404)
  }
})

authServer.listen(3001, () => {
  console.log('üîê Mock Auth Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001')
})

console.log('\nüéâ Mock Backend –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!')
console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:')
console.log('   - http://localhost:3002/courses - –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤') 
console.log('   - http://localhost:3002/courses/slug/python-for-beginners - –ö—É—Ä—Å –ø–æ Python')
console.log('   - http://localhost:3002/lessons/course/course-123 - –£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞')
console.log('   - http://localhost:3001/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
console.log('\nüåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000')
console.log('üìö –¢–µ—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: http://localhost:3000/student/python-for-beginners')
console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram WebApp!')
