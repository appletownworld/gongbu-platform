const axios = require('axios');

/**
 * üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–°–´–õ–û–ö –§–£–¢–ï–†–ê
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ö–ê–ñ–î–£–Æ —Å—Å—ã–ª–∫—É –∏–∑ Footer.tsx
 * –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ä–∞–Ω–µ–µ.
 */

const BASE_URL = 'http://localhost:3000';

// –í—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ Footer.tsx
const footerLinks = {
  platform: [
    { name: '–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', href: '/about' },
    { name: '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', href: '/how-it-works' },
    { name: '–¶–µ–Ω—ã', href: '/pricing' },
    { name: 'FAQ', href: '/faq' },
  ],
  learning: [
    { name: '–í—Å–µ –∫—É—Ä—Å—ã', href: '/courses' },
    { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', href: '/categories' },
    { name: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', href: '/instructors' },
    { name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', href: '/certificates' },
  ],
  support: [
    { name: '–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏', href: '/help' },
    { name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', href: '/contact' },
    { name: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', href: '/report' },
    { name: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', href: '/status' },
  ],
  legal: [
    { name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', href: '/privacy' },
    { name: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', href: '/terms' },
    { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', href: '/agreement' },
    { name: 'Cookies', href: '/cookies' },
  ],
};

async function checkLink(link) {
  try {
    const response = await axios.get(`${BASE_URL}${link.href}`, {
      timeout: 5000,
      validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    });
    
    return {
      name: link.name,
      href: link.href,
      status: response.status,
      success: response.status === 200,
      time: response.headers['x-response-time'] || 'N/A'
    };
  } catch (error) {
    return {
      name: link.name,
      href: link.href,
      status: 'ERROR',
      success: false,
      error: error.message
    };
  }
}

async function runCompleteFooterTest() {
  console.log('üîç ========== –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–°–´–õ–û–ö –§–£–¢–ï–†–ê ==========\n');
  
  const results = {
    platform: [],
    learning: [],
    support: [],
    legal: []
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  for (const [category, links] of Object.entries(footerLinks)) {
    console.log(`üìÇ ${category.toUpperCase()}:`);
    
    for (const link of links) {
      const result = await checkLink(link);
      results[category].push(result);
      
      const status = result.success ? '‚úÖ' : '‚ùå';
      const statusText = result.success ? 'OK' : `ERROR (${result.status})`;
      
      console.log(`   ${status} ${link.name} - ${statusText} (${result.href})`);
      
      if (!result.success && result.error) {
        console.log(`      üí• –û—à–∏–±–∫–∞: ${result.error}`);
      }
    }
    
    const successCount = results[category].filter(r => r.success).length;
    const totalCount = results[category].length;
    console.log(`   üìä ${category.toUpperCase()}: ${successCount}/${totalCount} (${Math.round(successCount/totalCount*100)}%)\n`);
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const allResults = Object.values(results).flat();
  const totalSuccess = allResults.filter(r => r.success).length;
  const totalLinks = allResults.length;
  const successRate = Math.round(totalSuccess / totalLinks * 100);
  
  console.log('üéØ ========== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ==========');
  console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalSuccess}/${totalLinks} —Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç (${successRate}%)`);
  
  // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  const brokenLinks = allResults.filter(r => !r.success);
  if (brokenLinks.length > 0) {
    console.log('\n‚ùå ========== –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–°–´–õ–ö–ò ==========');
    brokenLinks.forEach(link => {
      console.log(`   ‚ùå ${link.name} (${link.href}) - ${link.status}`);
      if (link.error) {
        console.log(`      üí• ${link.error}`);
      }
    });
  } else {
    console.log('\nüéâ –í–°–ï –°–°–´–õ–ö–ò –§–£–¢–ï–†–ê –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!');
  }
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  console.log('\nüìä ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ==========');
  Object.entries(results).forEach(([category, links]) => {
    const successCount = links.filter(r => r.success).length;
    const totalCount = links.length;
    const rate = Math.round(successCount / totalCount * 100);
    const emoji = rate === 100 ? 'üü¢' : rate >= 75 ? 'üü°' : 'üî¥';
    console.log(`   ${emoji} ${category.toUpperCase()}: ${successCount}/${totalCount} (${rate}%)`);
  });
  
  console.log('\nüèÅ ========== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ==========');
  console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
  
  if (successRate === 100) {
    console.log('üèÜ –û–¢–õ–ò–ß–ù–û! –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ñ—É—Ç–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ!');
  } else {
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${brokenLinks.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runCompleteFooterTest().catch(console.error);
