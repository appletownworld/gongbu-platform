version: '3.8'

# üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gongbu Platform
# –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ, —Ç–∞–∫ –∏ –Ω–∞ VPS
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–∑ .env —Ñ–∞–π–ª–∞

services:
  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-gongbu}_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gongbu_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gongbu_network

  # Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-gongbu}_redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_dev}
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_dev}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_dev}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gongbu_network

  # Auth Service (–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME:-gongbu}_auth_service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gongbu_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Course Service (–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤)
  course-service:
    build:
      context: ./services/course-service
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME:-gongbu}_course_service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gongbu_network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bot Service (Telegram –±–æ—Ç)
  bot-service:
    build:
      context: ./services/bot-service
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME:-gongbu}_bot_service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3003
      - DATABASE_URL=${DATABASE_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - COURSE_SERVICE_URL=http://course-service:3002
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REDIS_URL=${REDIS_URL}
      - WEBAPP_URL=${WEBAPP_URL}
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      course-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gongbu_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web App (React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
  web-app:
    build:
      context: ./apps/web-app
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-gongbu}_web_app
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_BASE_URL=${API_BASE_URL}
      - VITE_TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - VITE_WEBAPP_URL=${WEBAPP_URL}
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - course-service
      - bot-service
    restart: unless-stopped
    networks:
      - gongbu_network
    # –í development —Ä–µ–∂–∏–º–µ –¥–ª—è hot reload –º–æ–∂–Ω–æ –ø–æ–¥–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
    # volumes:
    #   - ./apps/web-app/src:/app/src
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-gongbu}_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
      - ./${NGINX_CONFIG:-nginx.local.conf}:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html
      - ./uploads:/app/uploads:ro
      # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
      - ./letsencrypt:/etc/letsencrypt:ro
    depends_on:
      web-app:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      course-service:
        condition: service_healthy
      bot-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gongbu_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local

networks:
  gongbu_network:
    driver: bridge
